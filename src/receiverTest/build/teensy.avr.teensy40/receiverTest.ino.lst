
C:\Users\Anuva\AppData\Local\Temp\arduino\sketches\AF30A7602142F82E4DE88C62223A00BE/receiverTest.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ec0 	.word	0x20000ec0
6000142c:	20001280 	.word	0x20001280

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f916 	bl	60001670 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b4 	bl	60001680 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f920 	bl	60001790 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fabd 	bl	60001ae0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fa54 	bl	60001a58 <analog_init>
	pwm_init();
600015b0:	f000 fa82 	bl	60001ab8 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f91a 	bl	600017ec <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f85c 	bl	60001674 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9ab 	bl	6000191c <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f855 	bl	6000167c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f851 	bl	60001678 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa7b 	bl	60001ad0 <____libc_init_array_veneer>
	main();
600015da:	f000 fa75 	bl	60001ac8 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00002920 	.word	0x00002920
600015ec:	60001c00 	.word	0x60001c00
600015f0:	00000000 	.word	0x00000000
600015f4:	20000ec0 	.word	0x20000ec0
600015f8:	60004524 	.word	0x60004524
600015fc:	20000000 	.word	0x20000000
60001600:	20000c00 	.word	0x20000c00
60001604:	00001025 	.word	0x00001025
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	000023f1 	.word	0x000023f1
60001618:	20001214 	.word	0x20001214
6000161c:	000023f5 	.word	0x000023f5
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20001218 	.word	0x20001218
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001670:	4770      	bx	lr
60001672:	bf00      	nop

60001674 <startup_default_middle_hook>:
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_late_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000167c:	bf00      	nop
6000167e:	4770      	bx	lr

60001680 <configure_cache>:
{
60001680:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001682:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001686:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001688:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168a:	4831      	ldr	r0, [pc, #196]	; (60001750 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000168c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001690:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001694:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001696:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169a:	482e      	ldr	r0, [pc, #184]	; (60001754 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000169c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016a6:	482c      	ldr	r0, [pc, #176]	; (60001758 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ac:	4a2b      	ldr	r2, [pc, #172]	; (6000175c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b2:	4c2b      	ldr	r4, [pc, #172]	; (60001760 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016b8:	482a      	ldr	r0, [pc, #168]	; (60001764 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016ba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016be:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c2:	4c29      	ldr	r4, [pc, #164]	; (60001768 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c4:	4829      	ldr	r0, [pc, #164]	; (6000176c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016ce:	4c28      	ldr	r4, [pc, #160]	; (60001770 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d4:	4827      	ldr	r0, [pc, #156]	; (60001774 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016d6:	4a28      	ldr	r2, [pc, #160]	; (60001778 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016e8:	4c24      	ldr	r4, [pc, #144]	; (6000177c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016ec:	4824      	ldr	r0, [pc, #144]	; (60001780 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016f6:	4a23      	ldr	r2, [pc, #140]	; (60001784 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016fc:	4c22      	ldr	r4, [pc, #136]	; (60001788 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001702:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001706:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170a:	4820      	ldr	r0, [pc, #128]	; (6000178c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000170c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001710:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001712:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001716:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171a:	bf00      	nop
	asm("nop");
6000171c:	bf00      	nop
	asm("nop");
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001724:	2201      	movs	r2, #1
60001726:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001732:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001736:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001742:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001746:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000174e:	4770      	bx	lr
60001750:	1000003f 	.word	0x1000003f
60001754:	07080025 	.word	0x07080025
60001758:	00100009 	.word	0x00100009
6000175c:	20001280 	.word	0x20001280
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	60000018 	.word	0x60000018
60001784:	070b002f 	.word	0x070b002f
60001788:	70000019 	.word	0x70000019
6000178c:	8000001a 	.word	0x8000001a

60001790 <usb_pll_start>:
{
60001790:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001792:	4a15      	ldr	r2, [pc, #84]	; (600017e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001794:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000179a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000179e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600017ac:	f013 0f02 	tst.w	r3, #2
600017b0:	d10e      	bne.n	600017d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600017b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600017b6:	d00f      	beq.n	600017d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600017b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600017bc:	d00e      	beq.n	600017dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600017be:	2b00      	cmp	r3, #0
600017c0:	daf3      	bge.n	600017aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600017c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600017c6:	d10b      	bne.n	600017e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600017c8:	065b      	lsls	r3, r3, #25
600017ca:	d50b      	bpl.n	600017e4 <usb_pll_start+0x54>
}
600017cc:	bcf0      	pop	{r4, r5, r6, r7}
600017ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600017d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017d4:	6190      	str	r0, [r2, #24]
			continue;
600017d6:	e7e8      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017d8:	6155      	str	r5, [r2, #20]
			continue;
600017da:	e7e6      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017dc:	6156      	str	r6, [r2, #20]
			continue;
600017de:	e7e4      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017e0:	6191      	str	r1, [r2, #24]
			continue;
600017e2:	e7e2      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e4:	6157      	str	r7, [r2, #20]
			continue;
600017e6:	e7e0      	b.n	600017aa <usb_pll_start+0x1a>
600017e8:	400d8000 	.word	0x400d8000

600017ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017ec:	4a3f      	ldr	r2, [pc, #252]	; (600018ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017f0:	493f      	ldr	r1, [pc, #252]	; (600018f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600017f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600017fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600018f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001802:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001806:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600018f8 <tempmon_init+0x10c>
{
6000180a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001810:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001814:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001818:	4d38      	ldr	r5, [pc, #224]	; (600018fc <tempmon_init+0x110>)
6000181a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000181c:	4c38      	ldr	r4, [pc, #224]	; (60001900 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000181e:	4839      	ldr	r0, [pc, #228]	; (60001904 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001820:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001822:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001826:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001828:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001830:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001834:	ee07 1a10 	vmov	s14, r1
60001838:	4b33      	ldr	r3, [pc, #204]	; (60001908 <tempmon_init+0x11c>)
6000183a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000183e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001840:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001844:	4931      	ldr	r1, [pc, #196]	; (6000190c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001846:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000184a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000184e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001852:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001856:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000185a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001862:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001866:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000186a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000186e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001872:	4827      	ldr	r0, [pc, #156]	; (60001910 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001874:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001878:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000187c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001880:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001884:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001888:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000188c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001890:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001894:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000189c:	ee16 3a10 	vmov	r3, s12
600018a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600018ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600018ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600018be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018c0:	4914      	ldr	r1, [pc, #80]	; (60001914 <tempmon_init+0x128>)
600018c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600018c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600018ca:	f043 0302 	orr.w	r3, r3, #2
600018ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600018d2:	4b11      	ldr	r3, [pc, #68]	; (60001918 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600018d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018e0:	2201      	movs	r2, #1
}
600018e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600018e8:	4770      	bx	lr
600018ea:	bf00      	nop
600018ec:	400d8100 	.word	0x400d8100
600018f0:	401f4400 	.word	0x401f4400
600018f4:	42aa0000 	.word	0x42aa0000
600018f8:	42b40000 	.word	0x42b40000
600018fc:	20001204 	.word	0x20001204
60001900:	20001200 	.word	0x20001200
60001904:	20001208 	.word	0x20001208
60001908:	2000120c 	.word	0x2000120c
6000190c:	0fff0000 	.word	0x0fff0000
60001910:	e000e400 	.word	0xe000e400
60001914:	20000c00 	.word	0x20000c00
60001918:	000011b1 	.word	0x000011b1

6000191c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000191c:	4b31      	ldr	r3, [pc, #196]	; (600019e4 <usb_init+0xc8>)
6000191e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001922:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001924:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001928:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000192c:	f000 f8dc 	bl	60001ae8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001930:	4a2d      	ldr	r2, [pc, #180]	; (600019e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001932:	492e      	ldr	r1, [pc, #184]	; (600019ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001938:	482d      	ldr	r0, [pc, #180]	; (600019f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000193a:	f043 0303 	orr.w	r3, r3, #3
6000193e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001942:	4b2c      	ldr	r3, [pc, #176]	; (600019f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001944:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001948:	6802      	ldr	r2, [r0, #0]
6000194a:	421a      	tst	r2, r3
6000194c:	d103      	bne.n	60001956 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000194e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001952:	079a      	lsls	r2, r3, #30
60001954:	d01b      	beq.n	6000198e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001956:	4a25      	ldr	r2, [pc, #148]	; (600019ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001958:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000195c:	4b24      	ldr	r3, [pc, #144]	; (600019f0 <usb_init+0xd4>)
6000195e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001960:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001964:	f043 0302 	orr.w	r3, r3, #2
60001968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000196c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001970:	079b      	lsls	r3, r3, #30
60001972:	d4fb      	bmi.n	6000196c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001974:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001978:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000197c:	4b1c      	ldr	r3, [pc, #112]	; (600019f0 <usb_init+0xd4>)
6000197e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001982:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001986:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001988:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000198a:	f000 f899 	bl	60001ac0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000198e:	4a18      	ldr	r2, [pc, #96]	; (600019f0 <usb_init+0xd4>)
60001990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001994:	4c15      	ldr	r4, [pc, #84]	; (600019ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001996:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001998:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000199a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000199c:	4b16      	ldr	r3, [pc, #88]	; (600019f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000199e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a8:	4618      	mov	r0, r3
600019aa:	f000 f895 	bl	60001ad8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600019ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600019be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600019c2:	641a      	str	r2, [r3, #64]	; 0x40
600019c4:	4b0d      	ldr	r3, [pc, #52]	; (600019fc <usb_init+0xe0>)
600019c6:	4a0e      	ldr	r2, [pc, #56]	; (60001a00 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600019cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600019d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600019d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600019de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600019e2:	bd10      	pop	{r4, pc}
600019e4:	400d8000 	.word	0x400d8000
600019e8:	400fc000 	.word	0x400fc000
600019ec:	402e0000 	.word	0x402e0000
600019f0:	400d9000 	.word	0x400d9000
600019f4:	001e1c00 	.word	0x001e1c00
600019f8:	20000000 	.word	0x20000000
600019fc:	20000c00 	.word	0x20000c00
60001a00:	00001399 	.word	0x00001399

60001a04 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a04:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a06:	4b0e      	ldr	r3, [pc, #56]	; (60001a40 <_reboot_Teensyduino_+0x3c>)
60001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a0a:	079b      	lsls	r3, r3, #30
60001a0c:	d400      	bmi.n	60001a10 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a0e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a10:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a12:	4b0c      	ldr	r3, [pc, #48]	; (60001a44 <_reboot_Teensyduino_+0x40>)
60001a14:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a16:	4a0c      	ldr	r2, [pc, #48]	; (60001a48 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a18:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a20:	490a      	ldr	r1, [pc, #40]	; (60001a4c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a22:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a26:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a28:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a2a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a32:	4807      	ldr	r0, [pc, #28]	; (60001a50 <_reboot_Teensyduino_+0x4c>)
60001a34:	4a07      	ldr	r2, [pc, #28]	; (60001a54 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a36:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a38:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a3a:	689b      	ldr	r3, [r3, #8]
60001a3c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a3e:	bf00      	nop
60001a40:	401f4400 	.word	0x401f4400
60001a44:	402e0000 	.word	0x402e0000
60001a48:	400ac000 	.word	0x400ac000
60001a4c:	00200003 	.word	0x00200003
60001a50:	20208000 	.word	0x20208000
60001a54:	eb120000 	.word	0xeb120000

60001a58 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a58:	4b10      	ldr	r3, [pc, #64]	; (60001a9c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a5a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a5c:	4a10      	ldr	r2, [pc, #64]	; (60001aa0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a60:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001a64:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a66:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a68:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a6e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001a72:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a74:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a76:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a78:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a7a:	061b      	lsls	r3, r3, #24
60001a7c:	d4fc      	bmi.n	60001a78 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a7e:	4a09      	ldr	r2, [pc, #36]	; (60001aa4 <analog_init+0x4c>)
60001a80:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a84:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a86:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a88:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a8a:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a8c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001a90:	d1fb      	bne.n	60001a8a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001a92:	4a05      	ldr	r2, [pc, #20]	; (60001aa8 <analog_init+0x50>)
60001a94:	7013      	strb	r3, [r2, #0]
}
60001a96:	f85d 4b04 	ldr.w	r4, [sp], #4
60001a9a:	4770      	bx	lr
60001a9c:	400fc000 	.word	0x400fc000
60001aa0:	400c4000 	.word	0x400c4000
60001aa4:	400c8000 	.word	0x400c8000
60001aa8:	2000123d 	.word	0x2000123d

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <__pwm_init_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__pwm_init_veneer+0x4>
60001abc:	00000f15 	.word	0x00000f15

60001ac0 <__delay_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__delay_veneer+0x4>
60001ac4:	000009ad 	.word	0x000009ad

60001ac8 <__main_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__main_veneer+0x4>
60001acc:	00000b19 	.word	0x00000b19

60001ad0 <____libc_init_array_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <____libc_init_array_veneer+0x4>
60001ad4:	000028c5 	.word	0x000028c5

60001ad8 <__memset_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__memset_veneer+0x4>
60001adc:	00002821 	.word	0x00002821

60001ae0 <__set_arm_clock_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__set_arm_clock_veneer+0x4>
60001ae4:	00002415 	.word	0x00002415

60001ae8 <__usb_init_serialnumber_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__usb_init_serialnumber_veneer+0x4>
60001aec:	00001b09 	.word	0x00001b09

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000045 000001ed                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
                        return (void *)-1;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)
                        errno = ENOMEM;
      24:	1a1b      	subs	r3, r3, r0
                }
                __brkval = prev + incr;
        }
        return prev;
}
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20000ec0 	.word	0x20000ec0
      3c:	20000ec0 	.word	0x20000ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	200011b0 	.word	0x200011b0
      64:	60006000 	.word	0x60006000

00000068 <read_receiver()>:
#include <PulsePosition.h>
PulsePositionInput ReceiverInput(RISING);
float ReceiverValue[]={0, 0, 0, 0, 0, 0, 0, 0};
int ChannelNumber=0; 
float InputThrottle;
void read_receiver(void){
      68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ChannelNumber = ReceiverInput.available();
      6a:	480a      	ldr	r0, [pc, #40]	; (94 <read_receiver()+0x2c>)
      6c:	f000 fb68 	bl	740 <PulsePositionInput::available()>
      70:	4e09      	ldr	r6, [pc, #36]	; (98 <read_receiver()+0x30>)
  if (ChannelNumber > 0) {
      72:	2800      	cmp	r0, #0
  ChannelNumber = ReceiverInput.available();
      74:	6030      	str	r0, [r6, #0]
  if (ChannelNumber > 0) {
      76:	dd0c      	ble.n	92 <read_receiver()+0x2a>
      78:	4d08      	ldr	r5, [pc, #32]	; (9c <read_receiver()+0x34>)
  for (int i=1; i<=ChannelNumber;i++){
      7a:	2401      	movs	r4, #1
    ReceiverValue[i-1]=ReceiverInput.read(i);
      7c:	4f05      	ldr	r7, [pc, #20]	; (94 <read_receiver()+0x2c>)
      7e:	b2e1      	uxtb	r1, r4
      80:	4638      	mov	r0, r7
      82:	f000 fb69 	bl	758 <PulsePositionInput::read(unsigned char)>
  for (int i=1; i<=ChannelNumber;i++){
      86:	3401      	adds	r4, #1
      88:	6833      	ldr	r3, [r6, #0]
    ReceiverValue[i-1]=ReceiverInput.read(i);
      8a:	eca5 0a01 	vstmia	r5!, {s0}
  for (int i=1; i<=ChannelNumber;i++){
      8e:	429c      	cmp	r4, r3
      90:	ddf5      	ble.n	7e <read_receiver()+0x16>
    }
  }
}
      92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      94:	2000108c 	.word	0x2000108c
      98:	20001088 	.word	0x20001088
      9c:	2000112c 	.word	0x2000112c

000000a0 <setup>:
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
}
      a4:	4d34      	ldr	r5, [pc, #208]	; (178 <setup+0xd8>)
      a6:	f240 28ee 	movw	r8, #750	; 0x2ee
      aa:	4c34      	ldr	r4, [pc, #208]	; (17c <setup+0xdc>)
      ac:	4f34      	ldr	r7, [pc, #208]	; (180 <setup+0xe0>)
      ae:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 19c <setup+0xfc>

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
	if (high >= modulo - 1) high = modulo - 2;
      b2:	682e      	ldr	r6, [r5, #0]
      b4:	ed2d 8b02 	vpush	{d8}
      b8:	f002 f90c 	bl	22d4 <yield>
      bc:	7823      	ldrb	r3, [r4, #0]
      be:	2b00      	cmp	r3, #0
      c0:	d049      	beq.n	156 <setup+0xb6>
      c2:	783b      	ldrb	r3, [r7, #0]
      c4:	07db      	lsls	r3, r3, #31
      c6:	d546      	bpl.n	156 <setup+0xb6>
      c8:	682b      	ldr	r3, [r5, #0]
      ca:	f8d9 2000 	ldr.w	r2, [r9]
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      ce:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      d0:	2b0e      	cmp	r3, #14
      d2:	d940      	bls.n	156 <setup+0xb6>
void setup() {
  Serial.begin(57600);
  pinMode(13, OUTPUT); 
      d4:	2101      	movs	r1, #1
      d6:	200d      	movs	r0, #13
      d8:	f000 fce6 	bl	aa8 <pinMode>
  digitalWrite(13, HIGH);
      dc:	2101      	movs	r1, #1
      de:	200d      	movs	r0, #13
      e0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 198 <setup+0xf8>
      e4:	f000 fcb6 	bl	a54 <digitalWrite>
  ReceiverInput.begin(7);
      e8:	2107      	movs	r1, #7
      ea:	4826      	ldr	r0, [pc, #152]	; (184 <setup+0xe4>)
      ec:	f000 fa96 	bl	61c <PulsePositionInput::begin(unsigned char)>
  analogWriteFrequency(1, 250);
      f0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 188 <setup+0xe8>
      f4:	2001      	movs	r0, #1
  analogWriteResolution(12);
  delay(250);
  while (ReceiverValue[2] < 1020 ||
      f6:	ed9f 8a25 	vldr	s16, [pc, #148]	; 18c <setup+0xec>
  analogWriteFrequency(1, 250);
      fa:	f000 fe95 	bl	e28 <analogWriteFrequency>
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
      fe:	200c      	movs	r0, #12
     100:	f000 ff82 	bl	1008 <analogWriteRes>
  delay(250);
     104:	20fa      	movs	r0, #250	; 0xfa
  while (ReceiverValue[2] < 1020 ||
     106:	eddf 8a22 	vldr	s17, [pc, #136]	; 190 <setup+0xf0>
  ChannelNumber = ReceiverInput.available();
     10a:	4f1e      	ldr	r7, [pc, #120]	; (184 <setup+0xe4>)
  delay(250);
     10c:	f000 fc4e 	bl	9ac <delay>
  while (ReceiverValue[2] < 1020 ||
     110:	edd8 7a02 	vldr	s15, [r8, #8]
     114:	eef4 7ac8 	vcmpe.f32	s15, s16
     118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     11c:	d404      	bmi.n	128 <setup+0x88>
     11e:	eef4 7ae8 	vcmpe.f32	s15, s17
     122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     126:	dd23      	ble.n	170 <setup+0xd0>
  ChannelNumber = ReceiverInput.available();
     128:	4638      	mov	r0, r7
     12a:	4e1a      	ldr	r6, [pc, #104]	; (194 <setup+0xf4>)
     12c:	f000 fb08 	bl	740 <PulsePositionInput::available()>
  if (ChannelNumber > 0) {
     130:	2800      	cmp	r0, #0
  ChannelNumber = ReceiverInput.available();
     132:	6030      	str	r0, [r6, #0]
  if (ChannelNumber > 0) {
     134:	dd0b      	ble.n	14e <setup+0xae>
     136:	4d18      	ldr	r5, [pc, #96]	; (198 <setup+0xf8>)
  for (int i=1; i<=ChannelNumber;i++){
     138:	2401      	movs	r4, #1
    ReceiverValue[i-1]=ReceiverInput.read(i);
     13a:	b2e1      	uxtb	r1, r4
     13c:	4638      	mov	r0, r7
     13e:	f000 fb0b 	bl	758 <PulsePositionInput::read(unsigned char)>
  for (int i=1; i<=ChannelNumber;i++){
     142:	3401      	adds	r4, #1
     144:	6833      	ldr	r3, [r6, #0]
    ReceiverValue[i-1]=ReceiverInput.read(i);
     146:	eca5 0a01 	vstmia	r5!, {s0}
  for (int i=1; i<=ChannelNumber;i++){
     14a:	429c      	cmp	r4, r3
     14c:	ddf5      	ble.n	13a <setup+0x9a>
    ReceiverValue[2] > 1050) {
      read_receiver();
      delay(4);
     14e:	2004      	movs	r0, #4
     150:	f000 fc2c 	bl	9ac <delay>
     154:	e7dc      	b.n	110 <setup+0x70>
			uint32_t elapsed = systick_millis_count - millis_begin;
     156:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     158:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     15a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     15c:	b12a      	cbz	r2, 16a <setup+0xca>
				if (elapsed > 2000) break;
     15e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     162:	d8b7      	bhi.n	d4 <setup+0x34>
			yield();
     164:	f002 f8b6 	bl	22d4 <yield>
     168:	e7a6      	b.n	b8 <setup+0x18>
				if (elapsed > 750) break;
     16a:	4543      	cmp	r3, r8
     16c:	d9fa      	bls.n	164 <setup+0xc4>
     16e:	e7b1      	b.n	d4 <setup+0x34>
    }
}
     170:	ecbd 8b02 	vpop	{d8}
     174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     178:	20001218 	.word	0x20001218
     17c:	20001245 	.word	0x20001245
     180:	20001244 	.word	0x20001244
     184:	2000108c 	.word	0x2000108c
     188:	437a0000 	.word	0x437a0000
     18c:	447f0000 	.word	0x447f0000
     190:	44834000 	.word	0x44834000
     194:	20001088 	.word	0x20001088
     198:	2000112c 	.word	0x2000112c
     19c:	20001228 	.word	0x20001228

000001a0 <loop>:
void loop() {
     1a0:	b510      	push	{r4, lr}
  read_receiver();
     1a2:	f7ff ff61 	bl	68 <read_receiver()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     1a6:	2110      	movs	r1, #16
     1a8:	480c      	ldr	r0, [pc, #48]	; (1dc <loop+0x3c>)
     1aa:	f002 f815 	bl	21d8 <usb_serial_write>
  Serial.print("Receiver Value: ");
  Serial.println(ReceiverValue[2]);
     1ae:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <loop+0x40>)
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     1b0:	4c0c      	ldr	r4, [pc, #48]	; (1e4 <loop+0x44>)
     1b2:	2102      	movs	r1, #2
     1b4:	ed93 0a02 	vldr	s0, [r3, #8]
     1b8:	4620      	mov	r0, r4
     1ba:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     1be:	f000 fb43 	bl	848 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     1c2:	4620      	mov	r0, r4
     1c4:	f000 fb30 	bl	828 <Print::println()>
     1c8:	2100      	movs	r1, #0
     1ca:	4807      	ldr	r0, [pc, #28]	; (1e8 <loop+0x48>)
     1cc:	f002 f804 	bl	21d8 <usb_serial_write>
  Serial.print(""); 
  delay(10);
     1d0:	200a      	movs	r0, #10
}
     1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
     1d6:	f000 bbe9 	b.w	9ac <delay>
     1da:	bf00      	nop
     1dc:	20000680 	.word	0x20000680
     1e0:	2000112c 	.word	0x2000112c
     1e4:	200007c0 	.word	0x200007c0
     1e8:	20000690 	.word	0x20000690

000001ec <_GLOBAL__sub_I_ReceiverInput>:
PulsePositionInput ReceiverInput(RISING);
     1ec:	2103      	movs	r1, #3
     1ee:	4801      	ldr	r0, [pc, #4]	; (1f4 <_GLOBAL__sub_I_ReceiverInput+0x8>)
     1f0:	f000 ba02 	b.w	5f8 <PulsePositionInput::PulsePositionInput(int)>
     1f4:	2000108c 	.word	0x2000108c

000001f8 <PulsePositionInput::isr()>:
}


void PulsePositionInput::isr() {  // capture and compare
  DBGdigitalWriteFast(4, HIGH);
  uint8_t channel = hardware[idx_channel].channel;
     1f8:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
void PulsePositionInput::isr() {  // capture and compare
     1fc:	b538      	push	{r3, r4, r5, lr}
  volatile IMXRT_TMR_CH_t *tmr_ch = &hardware[idx_channel].tmr->CH[channel];
     1fe:	4b31      	ldr	r3, [pc, #196]	; (2c4 <PulsePositionInput::isr()+0xcc>)
void PulsePositionInput::isr() {  // capture and compare
     200:	4604      	mov	r4, r0
  volatile IMXRT_TMR_CH_t *tmr_ch = &hardware[idx_channel].tmr->CH[channel];
     202:	eb03 1342 	add.w	r3, r3, r2, lsl #5
     206:	785a      	ldrb	r2, [r3, #1]
     208:	685b      	ldr	r3, [r3, #4]
  
#if 1
  // uses match
  // tries to use overflow 
  if (tmr_ch->CSCTRL & TMR_CSCTRL_TCF1) { // compare rollover
     20a:	eb03 1042 	add.w	r0, r3, r2, lsl #5
     20e:	0152      	lsls	r2, r2, #5
     210:	8a81      	ldrh	r1, [r0, #20]
     212:	06c9      	lsls	r1, r1, #27
     214:	d50d      	bpl.n	232 <PulsePositionInput::isr()+0x3a>
    tmr_ch->CSCTRL &= ~(TMR_CSCTRL_TCF1);  // clear
     216:	8a81      	ldrh	r1, [r0, #20]
     218:	f021 0110 	bic.w	r1, r1, #16
     21c:	0409      	lsls	r1, r1, #16
     21e:	0c09      	lsrs	r1, r1, #16
     220:	8281      	strh	r1, [r0, #20]
    overflow_count++;
    overflow_inc = true;
     222:	2001      	movs	r0, #1
    overflow_count++;
     224:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
     228:	4401      	add	r1, r0
     22a:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    overflow_inc = true;
     22e:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
    tmr_ch->SCTRL &= ~(TMR_SCTRL_TOF);  // clear
    overflow_count++;
    overflow_inc = true;
  }
#endif  
  if (tmr_ch->SCTRL & TMR_SCTRL_IEF) { // capture
     232:	4413      	add	r3, r2
     234:	89da      	ldrh	r2, [r3, #14]
     236:	0512      	lsls	r2, r2, #20
     238:	d52d      	bpl.n	296 <PulsePositionInput::isr()+0x9e>
    uint32_t val, count;
    tmr_ch->SCTRL &= ~(TMR_SCTRL_IEF);  // clear
     23a:	89da      	ldrh	r2, [r3, #14]
     23c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     240:	0412      	lsls	r2, r2, #16
     242:	0c12      	lsrs	r2, r2, #16
     244:	81da      	strh	r2, [r3, #14]
    val = tmr_ch->CAPT;
     246:	889b      	ldrh	r3, [r3, #4]
    count = overflow_count;
     248:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    val = tmr_ch->CAPT;
     24c:	b29b      	uxth	r3, r3
    if (val > 0xE000 && overflow_inc) count--;
     24e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
     252:	d903      	bls.n	25c <PulsePositionInput::isr()+0x64>
     254:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
     258:	b101      	cbz	r1, 25c <PulsePositionInput::isr()+0x64>
     25a:	3a01      	subs	r2, #1
    val |= (count << 16);
     25c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    count = val - prev;
     260:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    prev = val;
    if (count >= RX_MINIMUM_SPACE_CLOCKS) {
     264:	4918      	ldr	r1, [pc, #96]	; (2c8 <PulsePositionInput::isr()+0xd0>)
    count = val - prev;
     266:	1a9a      	subs	r2, r3, r2
    prev = val;
     268:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (count >= RX_MINIMUM_SPACE_CLOCKS) {
     26c:	428a      	cmp	r2, r1
     26e:	d91d      	bls.n	2ac <PulsePositionInput::isr()+0xb4>
      if (write_index < 255) {
     270:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
     274:	2dff      	cmp	r5, #255	; 0xff
     276:	d00b      	beq.n	290 <PulsePositionInput::isr()+0x98>
        for (int i = 0; i < write_index; i++) {
     278:	b12d      	cbz	r5, 286 <PulsePositionInput::isr()+0x8e>
          pulse_buffer[i] = pulse_width[i];
     27a:	00aa      	lsls	r2, r5, #2
     27c:	1d21      	adds	r1, r4, #4
     27e:	f104 0048 	add.w	r0, r4, #72	; 0x48
     282:	f002 fa51 	bl	2728 <memmove>
        }
        total_channels = write_index;
        available_flag = true;
     286:	2301      	movs	r3, #1
        total_channels = write_index;
     288:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
        available_flag = true;
     28c:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
      }
      write_index = 0;
     290:	2300      	movs	r3, #0
     292:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      if (write_index < PULSEPOSITION_MAXCHANNELS) {
        pulse_width[write_index++] = count;
      }
    }
  }
  ticks++;
     296:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
     29a:	3301      	adds	r3, #1
     29c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  asm volatile ("dsb");  // wait for clear  memory barrier
     2a0:	f3bf 8f4f 	dsb	sy
  overflow_inc = false;
     2a4:	2300      	movs	r3, #0
     2a6:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
  DBGdigitalWriteFast(4, LOW);
}
     2aa:	bd38      	pop	{r3, r4, r5, pc}
      if (write_index < PULSEPOSITION_MAXCHANNELS) {
     2ac:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
     2b0:	2b0f      	cmp	r3, #15
     2b2:	d8f0      	bhi.n	296 <PulsePositionInput::isr()+0x9e>
        pulse_width[write_index++] = count;
     2b4:	1c59      	adds	r1, r3, #1
     2b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     2ba:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
     2be:	605a      	str	r2, [r3, #4]
     2c0:	e7e9      	b.n	296 <PulsePositionInput::isr()+0x9e>
     2c2:	bf00      	nop
     2c4:	20000280 	.word	0x20000280
     2c8:	000200b1 	.word	0x000200b1

000002cc <PulsePositionBase::isrTimer2()>:
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     2cc:	4a14      	ldr	r2, [pc, #80]	; (320 <PulsePositionBase::isrTimer2()+0x54>)
{
     2ce:	b508      	push	{r3, lr}
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     2d0:	8a93      	ldrh	r3, [r2, #20]
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     2d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
     2d6:	2b50      	cmp	r3, #80	; 0x50
     2d8:	d008      	beq.n	2ec <PulsePositionBase::isrTimer2()+0x20>
     2da:	89d3      	ldrh	r3, [r2, #14]
     2dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     2e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     2e4:	d002      	beq.n	2ec <PulsePositionBase::isrTimer2()+0x20>
	asm volatile ("dsb");  // wait for clear  memory barrier
     2e6:	f3bf 8f4f 	dsb	sy
}
     2ea:	bd08      	pop	{r3, pc}
 		if 	(list[index]) {
     2ec:	4b0d      	ldr	r3, [pc, #52]	; (324 <PulsePositionBase::isrTimer2()+0x58>)
     2ee:	6958      	ldr	r0, [r3, #20]
     2f0:	b128      	cbz	r0, 2fe <PulsePositionBase::isrTimer2()+0x32>
 			list[index]->isr();
     2f2:	6803      	ldr	r3, [r0, #0]
     2f4:	681b      	ldr	r3, [r3, #0]
     2f6:	4798      	blx	r3
	asm volatile ("dsb");  // wait for clear  memory barrier
     2f8:	f3bf 8f4f 	dsb	sy
}
     2fc:	bd08      	pop	{r3, pc}
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     2fe:	4a08      	ldr	r2, [pc, #32]	; (320 <PulsePositionBase::isrTimer2()+0x54>)
     300:	8a93      	ldrh	r3, [r2, #20]
     302:	f023 0310 	bic.w	r3, r3, #16
     306:	041b      	lsls	r3, r3, #16
     308:	0c1b      	lsrs	r3, r3, #16
     30a:	8293      	strh	r3, [r2, #20]
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     30c:	89d3      	ldrh	r3, [r2, #14]
     30e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     312:	041b      	lsls	r3, r3, #16
     314:	0c1b      	lsrs	r3, r3, #16
     316:	81d3      	strh	r3, [r2, #14]
	asm volatile ("dsb");  // wait for clear  memory barrier
     318:	f3bf 8f4f 	dsb	sy
}
     31c:	bd08      	pop	{r3, pc}
     31e:	bf00      	nop
     320:	401e0000 	.word	0x401e0000
     324:	2000115c 	.word	0x2000115c

00000328 <PulsePositionBase::isrTimer4()>:
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     328:	4a27      	ldr	r2, [pc, #156]	; (3c8 <PulsePositionBase::isrTimer4()+0xa0>)
{
     32a:	b508      	push	{r3, lr}
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     32c:	8e93      	ldrh	r3, [r2, #52]	; 0x34
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     32e:	f003 0350 	and.w	r3, r3, #80	; 0x50
     332:	2b50      	cmp	r3, #80	; 0x50
     334:	d01f      	beq.n	376 <PulsePositionBase::isrTimer4()+0x4e>
     336:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
     338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     33c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     340:	d019      	beq.n	376 <PulsePositionBase::isrTimer4()+0x4e>
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     342:	4a21      	ldr	r2, [pc, #132]	; (3c8 <PulsePositionBase::isrTimer4()+0xa0>)
     344:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     348:	f003 0350 	and.w	r3, r3, #80	; 0x50
     34c:	2b50      	cmp	r3, #80	; 0x50
     34e:	d009      	beq.n	364 <PulsePositionBase::isrTimer4()+0x3c>
     350:	f8b2 304e 	ldrh.w	r3, [r2, #78]	; 0x4e
     354:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     35c:	d002      	beq.n	364 <PulsePositionBase::isrTimer4()+0x3c>
	asm volatile ("dsb");  // wait for clear  memory barrier
     35e:	f3bf 8f4f 	dsb	sy
}
     362:	bd08      	pop	{r3, pc}
 		if 	(list[index]) {
     364:	4b19      	ldr	r3, [pc, #100]	; (3cc <PulsePositionBase::isrTimer4()+0xa4>)
     366:	6858      	ldr	r0, [r3, #4]
     368:	b160      	cbz	r0, 384 <PulsePositionBase::isrTimer4()+0x5c>
 			list[index]->isr();
     36a:	6803      	ldr	r3, [r0, #0]
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	4798      	blx	r3
	asm volatile ("dsb");  // wait for clear  memory barrier
     370:	f3bf 8f4f 	dsb	sy
}
     374:	bd08      	pop	{r3, pc}
 		if 	(list[index]) {
     376:	4b15      	ldr	r3, [pc, #84]	; (3cc <PulsePositionBase::isrTimer4()+0xa4>)
     378:	6818      	ldr	r0, [r3, #0]
     37a:	b1b8      	cbz	r0, 3ac <PulsePositionBase::isrTimer4()+0x84>
 			list[index]->isr();
     37c:	6803      	ldr	r3, [r0, #0]
     37e:	681b      	ldr	r3, [r3, #0]
     380:	4798      	blx	r3
     382:	e7de      	b.n	342 <PulsePositionBase::isrTimer4()+0x1a>
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     384:	4a10      	ldr	r2, [pc, #64]	; (3c8 <PulsePositionBase::isrTimer4()+0xa0>)
     386:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
     38a:	f023 0310 	bic.w	r3, r3, #16
     38e:	041b      	lsls	r3, r3, #16
     390:	0c1b      	lsrs	r3, r3, #16
     392:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     396:	f8b2 304e 	ldrh.w	r3, [r2, #78]	; 0x4e
     39a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     39e:	041b      	lsls	r3, r3, #16
     3a0:	0c1b      	lsrs	r3, r3, #16
     3a2:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
	asm volatile ("dsb");  // wait for clear  memory barrier
     3a6:	f3bf 8f4f 	dsb	sy
}
     3aa:	bd08      	pop	{r3, pc}
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     3ac:	4a06      	ldr	r2, [pc, #24]	; (3c8 <PulsePositionBase::isrTimer4()+0xa0>)
     3ae:	8e93      	ldrh	r3, [r2, #52]	; 0x34
     3b0:	f023 0310 	bic.w	r3, r3, #16
     3b4:	041b      	lsls	r3, r3, #16
     3b6:	0c1b      	lsrs	r3, r3, #16
     3b8:	8693      	strh	r3, [r2, #52]	; 0x34
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     3ba:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
     3bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     3c0:	041b      	lsls	r3, r3, #16
     3c2:	0c1b      	lsrs	r3, r3, #16
     3c4:	85d3      	strh	r3, [r2, #46]	; 0x2e
}
     3c6:	e7bc      	b.n	342 <PulsePositionBase::isrTimer4()+0x1a>
     3c8:	401e8000 	.word	0x401e8000
     3cc:	2000115c 	.word	0x2000115c

000003d0 <PulsePositionBase::isrTimer1()>:
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     3d0:	4a38      	ldr	r2, [pc, #224]	; (4b4 <PulsePositionBase::isrTimer1()+0xe4>)
{
     3d2:	b508      	push	{r3, lr}
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     3d4:	8a93      	ldrh	r3, [r2, #20]
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     3d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
     3da:	2b50      	cmp	r3, #80	; 0x50
     3dc:	d032      	beq.n	444 <PulsePositionBase::isrTimer1()+0x74>
     3de:	89d3      	ldrh	r3, [r2, #14]
     3e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     3e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     3e8:	d02c      	beq.n	444 <PulsePositionBase::isrTimer1()+0x74>
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     3ea:	4a32      	ldr	r2, [pc, #200]	; (4b4 <PulsePositionBase::isrTimer1()+0xe4>)
     3ec:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     3f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
     3f4:	2b50      	cmp	r3, #80	; 0x50
     3f6:	d01e      	beq.n	436 <PulsePositionBase::isrTimer1()+0x66>
     3f8:	f8b2 304e 	ldrh.w	r3, [r2, #78]	; 0x4e
     3fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     404:	d017      	beq.n	436 <PulsePositionBase::isrTimer1()+0x66>
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     406:	4a2b      	ldr	r2, [pc, #172]	; (4b4 <PulsePositionBase::isrTimer1()+0xe4>)
     408:	8e93      	ldrh	r3, [r2, #52]	; 0x34
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     40a:	f003 0350 	and.w	r3, r3, #80	; 0x50
     40e:	2b50      	cmp	r3, #80	; 0x50
     410:	d008      	beq.n	424 <PulsePositionBase::isrTimer1()+0x54>
     412:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
     414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     41c:	d002      	beq.n	424 <PulsePositionBase::isrTimer1()+0x54>
	asm volatile ("dsb");  // wait for clear  memory barrier
     41e:	f3bf 8f4f 	dsb	sy
}
     422:	bd08      	pop	{r3, pc}
 		if 	(list[index]) {
     424:	4b24      	ldr	r3, [pc, #144]	; (4b8 <PulsePositionBase::isrTimer1()+0xe8>)
     426:	6918      	ldr	r0, [r3, #16]
     428:	b308      	cbz	r0, 46e <PulsePositionBase::isrTimer1()+0x9e>
 			list[index]->isr();
     42a:	6803      	ldr	r3, [r0, #0]
     42c:	681b      	ldr	r3, [r3, #0]
     42e:	4798      	blx	r3
	asm volatile ("dsb");  // wait for clear  memory barrier
     430:	f3bf 8f4f 	dsb	sy
}
     434:	bd08      	pop	{r3, pc}
 		if 	(list[index]) {
     436:	4b20      	ldr	r3, [pc, #128]	; (4b8 <PulsePositionBase::isrTimer1()+0xe8>)
     438:	68d8      	ldr	r0, [r3, #12]
     43a:	b340      	cbz	r0, 48e <PulsePositionBase::isrTimer1()+0xbe>
 			list[index]->isr();
     43c:	6803      	ldr	r3, [r0, #0]
     43e:	681b      	ldr	r3, [r3, #0]
     440:	4798      	blx	r3
     442:	e7e0      	b.n	406 <PulsePositionBase::isrTimer1()+0x36>
 		if 	(list[index]) {
     444:	4b1c      	ldr	r3, [pc, #112]	; (4b8 <PulsePositionBase::isrTimer1()+0xe8>)
     446:	6898      	ldr	r0, [r3, #8]
     448:	b118      	cbz	r0, 452 <PulsePositionBase::isrTimer1()+0x82>
 			list[index]->isr();
     44a:	6803      	ldr	r3, [r0, #0]
     44c:	681b      	ldr	r3, [r3, #0]
     44e:	4798      	blx	r3
     450:	e7cb      	b.n	3ea <PulsePositionBase::isrTimer1()+0x1a>
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     452:	4a18      	ldr	r2, [pc, #96]	; (4b4 <PulsePositionBase::isrTimer1()+0xe4>)
     454:	8a93      	ldrh	r3, [r2, #20]
     456:	f023 0310 	bic.w	r3, r3, #16
     45a:	041b      	lsls	r3, r3, #16
     45c:	0c1b      	lsrs	r3, r3, #16
     45e:	8293      	strh	r3, [r2, #20]
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     460:	89d3      	ldrh	r3, [r2, #14]
     462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     466:	041b      	lsls	r3, r3, #16
     468:	0c1b      	lsrs	r3, r3, #16
     46a:	81d3      	strh	r3, [r2, #14]
}
     46c:	e7bd      	b.n	3ea <PulsePositionBase::isrTimer1()+0x1a>
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     46e:	4a11      	ldr	r2, [pc, #68]	; (4b4 <PulsePositionBase::isrTimer1()+0xe4>)
     470:	8e93      	ldrh	r3, [r2, #52]	; 0x34
     472:	f023 0310 	bic.w	r3, r3, #16
     476:	041b      	lsls	r3, r3, #16
     478:	0c1b      	lsrs	r3, r3, #16
     47a:	8693      	strh	r3, [r2, #52]	; 0x34
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     47c:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
     47e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     482:	041b      	lsls	r3, r3, #16
     484:	0c1b      	lsrs	r3, r3, #16
     486:	85d3      	strh	r3, [r2, #46]	; 0x2e
	asm volatile ("dsb");  // wait for clear  memory barrier
     488:	f3bf 8f4f 	dsb	sy
}
     48c:	bd08      	pop	{r3, pc}
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     48e:	4a09      	ldr	r2, [pc, #36]	; (4b4 <PulsePositionBase::isrTimer1()+0xe4>)
     490:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
     494:	f023 0310 	bic.w	r3, r3, #16
     498:	041b      	lsls	r3, r3, #16
     49a:	0c1b      	lsrs	r3, r3, #16
     49c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     4a0:	f8b2 304e 	ldrh.w	r3, [r2, #78]	; 0x4e
     4a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     4a8:	041b      	lsls	r3, r3, #16
     4aa:	0c1b      	lsrs	r3, r3, #16
     4ac:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
}
     4b0:	e7a9      	b.n	406 <PulsePositionBase::isrTimer1()+0x36>
     4b2:	bf00      	nop
     4b4:	401dc000 	.word	0x401dc000
     4b8:	2000115c 	.word	0x2000115c

000004bc <PulsePositionBase::isrTimer3()>:
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     4bc:	4a4c      	ldr	r2, [pc, #304]	; (5f0 <PulsePositionBase::isrTimer3()+0x134>)
{
     4be:	b508      	push	{r3, lr}
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     4c0:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     4c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
     4c8:	2b50      	cmp	r3, #80	; 0x50
     4ca:	d046      	beq.n	55a <PulsePositionBase::isrTimer3()+0x9e>
     4cc:	f8b2 304e 	ldrh.w	r3, [r2, #78]	; 0x4e
     4d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     4d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     4d8:	d03f      	beq.n	55a <PulsePositionBase::isrTimer3()+0x9e>
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     4da:	4a45      	ldr	r2, [pc, #276]	; (5f0 <PulsePositionBase::isrTimer3()+0x134>)
     4dc:	f8b2 3074 	ldrh.w	r3, [r2, #116]	; 0x74
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     4e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
     4e4:	2b50      	cmp	r3, #80	; 0x50
     4e6:	d031      	beq.n	54c <PulsePositionBase::isrTimer3()+0x90>
     4e8:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
     4ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     4f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     4f4:	d02a      	beq.n	54c <PulsePositionBase::isrTimer3()+0x90>
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     4f6:	4a3e      	ldr	r2, [pc, #248]	; (5f0 <PulsePositionBase::isrTimer3()+0x134>)
     4f8:	8e93      	ldrh	r3, [r2, #52]	; 0x34
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     4fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
     4fe:	2b50      	cmp	r3, #80	; 0x50
     500:	d01d      	beq.n	53e <PulsePositionBase::isrTimer3()+0x82>
     502:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
     504:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     508:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     50c:	d017      	beq.n	53e <PulsePositionBase::isrTimer3()+0x82>
 	if (((tmr_ch->CSCTRL & (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) == (TMR_CSCTRL_TCF1 | TMR_CSCTRL_TCF1EN)) 
     50e:	4a38      	ldr	r2, [pc, #224]	; (5f0 <PulsePositionBase::isrTimer3()+0x134>)
     510:	8a93      	ldrh	r3, [r2, #20]
			|| ((tmr_ch->SCTRL & (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE)) == (TMR_SCTRL_IEF | TMR_SCTRL_IEFIE))) {
     512:	f003 0350 	and.w	r3, r3, #80	; 0x50
     516:	2b50      	cmp	r3, #80	; 0x50
     518:	d008      	beq.n	52c <PulsePositionBase::isrTimer3()+0x70>
     51a:	89d3      	ldrh	r3, [r2, #14]
     51c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     524:	d002      	beq.n	52c <PulsePositionBase::isrTimer3()+0x70>
	asm volatile ("dsb");  // wait for clear  memory barrier
     526:	f3bf 8f4f 	dsb	sy
}
     52a:	bd08      	pop	{r3, pc}
 		if 	(list[index]) {
     52c:	4b31      	ldr	r3, [pc, #196]	; (5f4 <PulsePositionBase::isrTimer3()+0x138>)
     52e:	6a58      	ldr	r0, [r3, #36]	; 0x24
     530:	b1d8      	cbz	r0, 56a <PulsePositionBase::isrTimer3()+0xae>
 			list[index]->isr();
     532:	6803      	ldr	r3, [r0, #0]
     534:	681b      	ldr	r3, [r3, #0]
     536:	4798      	blx	r3
	asm volatile ("dsb");  // wait for clear  memory barrier
     538:	f3bf 8f4f 	dsb	sy
}
     53c:	bd08      	pop	{r3, pc}
 		if 	(list[index]) {
     53e:	4b2d      	ldr	r3, [pc, #180]	; (5f4 <PulsePositionBase::isrTimer3()+0x138>)
     540:	6a18      	ldr	r0, [r3, #32]
     542:	b310      	cbz	r0, 58a <PulsePositionBase::isrTimer3()+0xce>
 			list[index]->isr();
     544:	6803      	ldr	r3, [r0, #0]
     546:	681b      	ldr	r3, [r3, #0]
     548:	4798      	blx	r3
     54a:	e7e0      	b.n	50e <PulsePositionBase::isrTimer3()+0x52>
 		if 	(list[index]) {
     54c:	4b29      	ldr	r3, [pc, #164]	; (5f4 <PulsePositionBase::isrTimer3()+0x138>)
     54e:	69d8      	ldr	r0, [r3, #28]
     550:	b348      	cbz	r0, 5a6 <PulsePositionBase::isrTimer3()+0xea>
 			list[index]->isr();
     552:	6803      	ldr	r3, [r0, #0]
     554:	681b      	ldr	r3, [r3, #0]
     556:	4798      	blx	r3
     558:	e7cd      	b.n	4f6 <PulsePositionBase::isrTimer3()+0x3a>
 		if 	(list[index]) {
     55a:	4b26      	ldr	r3, [pc, #152]	; (5f4 <PulsePositionBase::isrTimer3()+0x138>)
     55c:	6998      	ldr	r0, [r3, #24]
     55e:	2800      	cmp	r0, #0
     560:	d033      	beq.n	5ca <PulsePositionBase::isrTimer3()+0x10e>
 			list[index]->isr();
     562:	6803      	ldr	r3, [r0, #0]
     564:	681b      	ldr	r3, [r3, #0]
     566:	4798      	blx	r3
     568:	e7b7      	b.n	4da <PulsePositionBase::isrTimer3()+0x1e>
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     56a:	4a21      	ldr	r2, [pc, #132]	; (5f0 <PulsePositionBase::isrTimer3()+0x134>)
     56c:	8a93      	ldrh	r3, [r2, #20]
     56e:	f023 0310 	bic.w	r3, r3, #16
     572:	041b      	lsls	r3, r3, #16
     574:	0c1b      	lsrs	r3, r3, #16
     576:	8293      	strh	r3, [r2, #20]
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     578:	89d3      	ldrh	r3, [r2, #14]
     57a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     57e:	041b      	lsls	r3, r3, #16
     580:	0c1b      	lsrs	r3, r3, #16
     582:	81d3      	strh	r3, [r2, #14]
	asm volatile ("dsb");  // wait for clear  memory barrier
     584:	f3bf 8f4f 	dsb	sy
}
     588:	bd08      	pop	{r3, pc}
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     58a:	4a19      	ldr	r2, [pc, #100]	; (5f0 <PulsePositionBase::isrTimer3()+0x134>)
     58c:	8e93      	ldrh	r3, [r2, #52]	; 0x34
     58e:	f023 0310 	bic.w	r3, r3, #16
     592:	041b      	lsls	r3, r3, #16
     594:	0c1b      	lsrs	r3, r3, #16
     596:	8693      	strh	r3, [r2, #52]	; 0x34
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     598:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
     59a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     59e:	041b      	lsls	r3, r3, #16
     5a0:	0c1b      	lsrs	r3, r3, #16
     5a2:	85d3      	strh	r3, [r2, #46]	; 0x2e
}
     5a4:	e7b3      	b.n	50e <PulsePositionBase::isrTimer3()+0x52>
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     5a6:	4a12      	ldr	r2, [pc, #72]	; (5f0 <PulsePositionBase::isrTimer3()+0x134>)
     5a8:	f8b2 3074 	ldrh.w	r3, [r2, #116]	; 0x74
     5ac:	f023 0310 	bic.w	r3, r3, #16
     5b0:	041b      	lsls	r3, r3, #16
     5b2:	0c1b      	lsrs	r3, r3, #16
     5b4:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     5b8:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
     5bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     5c0:	041b      	lsls	r3, r3, #16
     5c2:	0c1b      	lsrs	r3, r3, #16
     5c4:	f8a2 306e 	strh.w	r3, [r2, #110]	; 0x6e
}
     5c8:	e795      	b.n	4f6 <PulsePositionBase::isrTimer3()+0x3a>
 			tmr_ch->CSCTRL &= ~TMR_CSCTRL_TCF1;
     5ca:	4a09      	ldr	r2, [pc, #36]	; (5f0 <PulsePositionBase::isrTimer3()+0x134>)
     5cc:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
     5d0:	f023 0310 	bic.w	r3, r3, #16
     5d4:	041b      	lsls	r3, r3, #16
     5d6:	0c1b      	lsrs	r3, r3, #16
     5d8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
			tmr_ch->SCTRL &= ~TMR_SCTRL_IEF;
     5dc:	f8b2 304e 	ldrh.w	r3, [r2, #78]	; 0x4e
     5e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     5e4:	041b      	lsls	r3, r3, #16
     5e6:	0c1b      	lsrs	r3, r3, #16
     5e8:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
}
     5ec:	e775      	b.n	4da <PulsePositionBase::isrTimer3()+0x1e>
     5ee:	bf00      	nop
     5f0:	401e4000 	.word	0x401e4000
     5f4:	2000115c 	.word	0x2000115c

000005f8 <PulsePositionInput::PulsePositionInput(int)>:
	if (polarity == FALLING) {
     5f8:	3902      	subs	r1, #2
PulsePositionInput::PulsePositionInput(int polarity)
     5fa:	f04f 0201 	mov.w	r2, #1
     5fe:	b410      	push	{r4}
	if (polarity == FALLING) {
     600:	bf18      	it	ne
     602:	2101      	movne	r1, #1
PulsePositionInput::PulsePositionInput(int polarity)
     604:	4c04      	ldr	r4, [pc, #16]	; (618 <PulsePositionInput::PulsePositionInput(int)+0x20>)
     606:	f880 2093 	strb.w	r2, [r0, #147]	; 0x93
     60a:	6004      	str	r4, [r0, #0]
	if (polarity == FALLING) {
     60c:	f880 1092 	strb.w	r1, [r0, #146]	; 0x92
}
     610:	f85d 4b04 	ldr.w	r4, [sp], #4
     614:	4770      	bx	lr
     616:	bf00      	nop
     618:	200003fc 	.word	0x200003fc

0000061c <PulsePositionInput::begin(unsigned char)>:
{
     61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (idx_channel = 0; idx_channel < _hardware_count; idx_channel++) {
     620:	2300      	movs	r3, #0
     622:	4c41      	ldr	r4, [pc, #260]	; (728 <PulsePositionInput::begin(unsigned char)+0x10c>)
     624:	2206      	movs	r2, #6
     626:	46a6      	mov	lr, r4
     628:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
     62c:	e007      	b.n	63e <PulsePositionInput::begin(unsigned char)+0x22>
     62e:	fa1f f38c 	uxth.w	r3, ip
     632:	2b0a      	cmp	r3, #10
     634:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
     638:	d073      	beq.n	722 <PulsePositionInput::begin(unsigned char)+0x106>
		if (hardware[idx_channel].pin == rxPin) break; 
     63a:	f81e 2f20 	ldrb.w	r2, [lr, #32]!
     63e:	4291      	cmp	r1, r2
	for (idx_channel = 0; idx_channel < _hardware_count; idx_channel++) {
     640:	f103 0c01 	add.w	ip, r3, #1
		if (hardware[idx_channel].pin == rxPin) break; 
     644:	d1f3      	bne.n	62e <PulsePositionInput::begin(unsigned char)+0x12>
	*hardware[idx_channel].clock_gate_register |= hardware[idx_channel].clock_gate_mask;
     646:	ea4f 1e43 	mov.w	lr, r3, lsl #5
	tmr_ch->CTRL = 0; // stop
     64a:	f04f 0c00 	mov.w	ip, #0
	*hardware[idx_channel].clock_gate_register |= hardware[idx_channel].clock_gate_mask;
     64e:	eb04 1343 	add.w	r3, r4, r3, lsl #5
	tmr_ch->COMP1 = 0xffff;  // count up to this val, interrupt,  and start again
     652:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*hardware[idx_channel].clock_gate_register |= hardware[idx_channel].clock_gate_mask;
     656:	689d      	ldr	r5, [r3, #8]
	uint8_t channel =  hardware[idx_channel].channel;
     658:	785a      	ldrb	r2, [r3, #1]
	volatile IMXRT_TMR_CH_t *tmr_ch = &hardware[idx_channel].tmr->CH[channel];
     65a:	685e      	ldr	r6, [r3, #4]
	*hardware[idx_channel].clock_gate_register |= hardware[idx_channel].clock_gate_mask;
     65c:	f8d3 800c 	ldr.w	r8, [r3, #12]
     660:	682b      	ldr	r3, [r5, #0]
     662:	ea43 0308 	orr.w	r3, r3, r8
     666:	602b      	str	r3, [r5, #0]
	tmr_ch->CTRL = 0; // stop
     668:	eb06 1542 	add.w	r5, r6, r2, lsl #5
     66c:	0153      	lsls	r3, r2, #5
     66e:	f8a5 c00c 	strh.w	ip, [r5, #12]
	tmr_ch->CNTR = 0;
     672:	f8a5 c00a 	strh.w	ip, [r5, #10]
	tmr_ch->LOAD = 0;
     676:	f8a5 c006 	strh.w	ip, [r5, #6]
	tmr_ch->CSCTRL = 0;
     67a:	f8a5 c014 	strh.w	ip, [r5, #20]
	tmr_ch->LOAD = 0;  // start val after compare
     67e:	f8a5 c006 	strh.w	ip, [r5, #6]
	tmr_ch->COMP1 = 0xffff;  // count up to this val, interrupt,  and start again
     682:	52f7      	strh	r7, [r6, r3]
	tmr_ch->CMPLD1 = 0xffff;
     684:	822f      	strh	r7, [r5, #16]
	tmr_ch->CTRL = 0; // stop
     686:	0157      	lsls	r7, r2, #5
	if(outPolarity == 0){
     688:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
     68c:	2b00      	cmp	r3, #0
     68e:	d044      	beq.n	71a <PulsePositionInput::begin(unsigned char)+0xfe>
		tmr_ch->SCTRL = TMR_SCTRL_CAPTURE_MODE(1);  //rising
     690:	2340      	movs	r3, #64	; 0x40
     692:	81eb      	strh	r3, [r5, #14]
	attachInterruptVector(hardware[idx_channel].interrupt, hardware[idx_channel].isr);
     694:	eb04 030e 	add.w	r3, r4, lr
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     698:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 73c <PulsePositionInput::begin(unsigned char)+0x120>
     69c:	7c1d      	ldrb	r5, [r3, #16]
     69e:	f8d3 e014 	ldr.w	lr, [r3, #20]
     6a2:	f105 0310 	add.w	r3, r5, #16
     6a6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
	tmr_ch->SCTRL |= TMR_SCTRL_IEFIE;  // enable compare interrupt as well as overflow
     6aa:	19f3      	adds	r3, r6, r7
	NVIC_SET_PRIORITY(hardware[idx_channel].interrupt, 32);
     6ac:	2720      	movs	r7, #32
	tmr_ch->CTRL =  TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + 2) | TMR_CTRL_SCS(channel) | TMR_CTRL_LENGTH ; // prescale
     6ae:	01d2      	lsls	r2, r2, #7
	NVIC_ENABLE_IRQ(hardware[idx_channel].interrupt);
     6b0:	f04f 0e01 	mov.w	lr, #1
	tmr_ch->SCTRL |= TMR_SCTRL_IEFIE;  // enable compare interrupt as well as overflow
     6b4:	89dd      	ldrh	r5, [r3, #14]
	tmr_ch->CTRL =  TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + 2) | TMR_CTRL_SCS(channel) | TMR_CTRL_LENGTH ; // prescale
     6b6:	f402 72c0 	and.w	r2, r2, #384	; 0x180
	tmr_ch->SCTRL |= TMR_SCTRL_IEFIE;  // enable compare interrupt as well as overflow
     6ba:	b2ad      	uxth	r5, r5
     6bc:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
     6c0:	81dd      	strh	r5, [r3, #14]
	NVIC_SET_PRIORITY(hardware[idx_channel].interrupt, 32);
     6c2:	f8b0 509e 	ldrh.w	r5, [r0, #158]	; 0x9e
     6c6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
     6ca:	7c2e      	ldrb	r6, [r5, #16]
	tmr_ch->CSCTRL = TMR_CSCTRL_TCF1EN;  // enable capture interrupt
     6cc:	2540      	movs	r5, #64	; 0x40
     6ce:	829d      	strh	r5, [r3, #20]
	NVIC_SET_PRIORITY(hardware[idx_channel].interrupt, 32);
     6d0:	4d16      	ldr	r5, [pc, #88]	; (72c <PulsePositionInput::begin(unsigned char)+0x110>)
     6d2:	5577      	strb	r7, [r6, r5]
	tmr_ch->CTRL =  TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + 2) | TMR_CTRL_SCS(channel) | TMR_CTRL_LENGTH ; // prescale
     6d4:	f243 4620 	movw	r6, #13344	; 0x3420
	NVIC_ENABLE_IRQ(hardware[idx_channel].interrupt);
     6d8:	f8b0 709e 	ldrh.w	r7, [r0, #158]	; 0x9e
     6dc:	4d14      	ldr	r5, [pc, #80]	; (730 <PulsePositionInput::begin(unsigned char)+0x114>)
	tmr_ch->CTRL =  TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + 2) | TMR_CTRL_SCS(channel) | TMR_CTRL_LENGTH ; // prescale
     6de:	4316      	orrs	r6, r2
	NVIC_ENABLE_IRQ(hardware[idx_channel].interrupt);
     6e0:	eb04 1447 	add.w	r4, r4, r7, lsl #5
     6e4:	f894 c010 	ldrb.w	ip, [r4, #16]
     6e8:	eb05 125c 	add.w	r2, r5, ip, lsr #5
     6ec:	f00c 0c1f 	and.w	ip, ip, #31
     6f0:	0092      	lsls	r2, r2, #2
     6f2:	fa0e f50c 	lsl.w	r5, lr, ip
     6f6:	6015      	str	r5, [r2, #0]
	tmr_ch->CTRL =  TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + 2) | TMR_CTRL_SCS(channel) | TMR_CTRL_LENGTH ; // prescale
     6f8:	819e      	strh	r6, [r3, #12]
	list[idx_channel] = this;
     6fa:	4b0e      	ldr	r3, [pc, #56]	; (734 <PulsePositionInput::begin(unsigned char)+0x118>)
     6fc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
	if (hardware[idx_channel].select_input_register) {
     700:	69a3      	ldr	r3, [r4, #24]
     702:	b10b      	cbz	r3, 708 <PulsePositionInput::begin(unsigned char)+0xec>
		*hardware[idx_channel].select_input_register = hardware[idx_channel].select_val;
     704:	69e2      	ldr	r2, [r4, #28]
     706:	601a      	str	r2, [r3, #0]
	*(portConfigRegister(rxPin)) = 1 | 0x10;
     708:	4b0b      	ldr	r3, [pc, #44]	; (738 <PulsePositionInput::begin(unsigned char)+0x11c>)
     70a:	2211      	movs	r2, #17
	return true;
     70c:	2001      	movs	r0, #1
	*(portConfigRegister(rxPin)) = 1 | 0x10;
     70e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
     712:	685b      	ldr	r3, [r3, #4]
     714:	601a      	str	r2, [r3, #0]
}
     716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  tmr_ch->SCTRL = TMR_SCTRL_CAPTURE_MODE(1) | TMR_SCTRL_IPS;  //falling
     71a:	f44f 7310 	mov.w	r3, #576	; 0x240
     71e:	81eb      	strh	r3, [r5, #14]
     720:	e7b8      	b.n	694 <PulsePositionInput::begin(unsigned char)+0x78>
	if (idx_channel == _hardware_count) return false;
     722:	2000      	movs	r0, #0
}
     724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     728:	20000280 	.word	0x20000280
     72c:	e000e400 	.word	0xe000e400
     730:	38003840 	.word	0x38003840
     734:	2000115c 	.word	0x2000115c
     738:	20000400 	.word	0x20000400
     73c:	20000c00 	.word	0x20000c00

00000740 <PulsePositionInput::available()>:
	__disable_irq();
     740:	b672      	cpsid	i
	flag = available_flag;
     742:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
	total = total_channels;
     746:	f890 0091 	ldrb.w	r0, [r0, #145]	; 0x91
	flag = available_flag;
     74a:	b2db      	uxtb	r3, r3
	__enable_irq();
     74c:	b662      	cpsie	i
	if (flag) return total;
     74e:	2b00      	cmp	r3, #0
}
     750:	bf08      	it	eq
     752:	f04f 30ff 	moveq.w	r0, #4294967295
     756:	4770      	bx	lr

00000758 <PulsePositionInput::read(unsigned char)>:
	if (channel == 0) return 0.0;
     758:	b1d9      	cbz	r1, 792 <PulsePositionInput::read(unsigned char)+0x3a>
	index = channel - 1;
     75a:	1e4b      	subs	r3, r1, #1
	__disable_irq();
     75c:	b672      	cpsid	i
	total = total_channels;
     75e:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
	if (index < total) value = pulse_buffer[index];
     762:	4293      	cmp	r3, r2
     764:	d308      	bcc.n	778 <PulsePositionInput::read(unsigned char)+0x20>
     766:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 798 <PulsePositionInput::read(unsigned char)+0x40>
	if (channel >= total) available_flag = false;
     76a:	428a      	cmp	r2, r1
     76c:	d802      	bhi.n	774 <PulsePositionInput::read(unsigned char)+0x1c>
     76e:	2300      	movs	r3, #0
     770:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
	__enable_irq();
     774:	b662      	cpsie	i
	return (float)value / (float)CLOCKS_PER_MICROSECOND;
     776:	4770      	bx	lr
	if (index < total) value = pulse_buffer[index];
     778:	f101 0311 	add.w	r3, r1, #17
	return (float)value / (float)CLOCKS_PER_MICROSECOND;
     77c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 79c <PulsePositionInput::read(unsigned char)+0x44>
     780:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     784:	edd3 7a00 	vldr	s15, [r3]
     788:	eef8 7a67 	vcvt.f32.u32	s15, s15
     78c:	ee87 0a87 	vdiv.f32	s0, s15, s14
     790:	e7eb      	b.n	76a <PulsePositionInput::read(unsigned char)+0x12>
	if (channel == 0) return 0.0;
     792:	ed9f 0a01 	vldr	s0, [pc, #4]	; 798 <PulsePositionInput::read(unsigned char)+0x40>
}
     796:	4770      	bx	lr
     798:	00000000 	.word	0x00000000
     79c:	42160000 	.word	0x42160000

000007a0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     7a0:	4608      	mov	r0, r1
     7a2:	f001 bd03 	b.w	21ac <usb_serial_putchar>
     7a6:	bf00      	nop

000007a8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
     7a8:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     7aa:	b570      	push	{r4, r5, r6, lr}
		base = 10;
     7ac:	bf08      	it	eq
     7ae:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     7b0:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
     7b2:	b391      	cbz	r1, 81a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
     7b4:	f04f 0e21 	mov.w	lr, #33	; 0x21
     7b8:	e001      	b.n	7be <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
     7ba:	fa5f fe86 	uxtb.w	lr, r6
     7be:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
     7c2:	fbb1 f5f2 	udiv	r5, r1, r2
     7c6:	fb02 1415 	mls	r4, r2, r5, r1
     7ca:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     7ce:	2c09      	cmp	r4, #9
     7d0:	f10c 0437 	add.w	r4, ip, #55	; 0x37
     7d4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
     7d8:	bf98      	it	ls
     7da:	fa5f f48c 	uxtbls.w	r4, ip
     7de:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
     7e2:	bf88      	it	hi
     7e4:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
     7e6:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     7e8:	44ec      	add	ip, sp
			n /= base;
     7ea:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     7ec:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
     7f0:	d2e3      	bcs.n	7ba <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
     7f2:	b14b      	cbz	r3, 808 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
     7f4:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
     7f8:	222d      	movs	r2, #45	; 0x2d
		i--;
     7fa:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
     7fe:	f10e 0328 	add.w	r3, lr, #40	; 0x28
     802:	446b      	add	r3, sp
     804:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
     808:	6803      	ldr	r3, [r0, #0]
     80a:	a901      	add	r1, sp, #4
     80c:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
     810:	685b      	ldr	r3, [r3, #4]
     812:	4471      	add	r1, lr
     814:	4798      	blx	r3
}
     816:	b00a      	add	sp, #40	; 0x28
     818:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
     81a:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
     81c:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
     820:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
     824:	e7e5      	b.n	7f2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
     826:	bf00      	nop

00000828 <Print::println()>:
{
     828:	b500      	push	{lr}
	return write(buf, 2);
     82a:	6803      	ldr	r3, [r0, #0]
{
     82c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
     82e:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
     832:	2202      	movs	r2, #2
     834:	a901      	add	r1, sp, #4
     836:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
     838:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
     83c:	4798      	blx	r3
}
     83e:	b003      	add	sp, #12
     840:	f85d fb04 	ldr.w	pc, [sp], #4
     844:	0000      	movs	r0, r0
	...

00000848 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
     848:	eeb4 0b40 	vcmp.f64	d0, d0
{
     84c:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
     84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
     852:	4605      	mov	r5, r0
     854:	ed2d 8b02 	vpush	{d8}
     858:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
     85a:	d67c      	bvs.n	956 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
     85c:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
     860:	ed9f 6b47 	vldr	d6, [pc, #284]	; 980 <Print::printFloat(double, unsigned char)+0x138>
     864:	eeb4 7b46 	vcmp.f64	d7, d6
     868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     86c:	dc6b      	bgt.n	946 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
     86e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 988 <Print::printFloat(double, unsigned char)+0x140>
     872:	eeb4 0bc7 	vcmpe.f64	d0, d7
     876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     87a:	dc5a      	bgt.n	932 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
     87c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 990 <Print::printFloat(double, unsigned char)+0x148>
     880:	eeb4 0bc7 	vcmpe.f64	d0, d7
     884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     888:	d453      	bmi.n	932 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
     88a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
     88e:	460c      	mov	r4, r1
     890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     894:	d45b      	bmi.n	94e <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
     896:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
     898:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
     89c:	2c00      	cmp	r4, #0
     89e:	d05e      	beq.n	95e <Print::printFloat(double, unsigned char)+0x116>
     8a0:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
     8a4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 998 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
     8a8:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
     8ac:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
     8b0:	fa5f f28c 	uxtb.w	r2, ip
     8b4:	42a2      	cmp	r2, r4
     8b6:	d3f7      	bcc.n	8a8 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
     8b8:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
     8bc:	220a      	movs	r2, #10
     8be:	4628      	mov	r0, r5
     8c0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
     8c4:	eeb8 8b67 	vcvt.f64.u32	d8, s15
     8c8:	ee17 1a90 	vmov	r1, s15
     8cc:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
     8d0:	f7ff ff6a 	bl	7a8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
     8d4:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
     8d6:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
     8da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
     8de:	4606      	mov	r6, r0
		buf[0] = '.';
     8e0:	bf28      	it	cs
     8e2:	240f      	movcs	r4, #15
     8e4:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
     8e8:	f10d 0309 	add.w	r3, sp, #9
     8ec:	aa02      	add	r2, sp, #8
     8ee:	1e61      	subs	r1, r4, #1
     8f0:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
     8f4:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
     8f8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
     8fc:	edcd 7a01 	vstr	s15, [sp, #4]
     900:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
     904:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
     908:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
     90a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
     90e:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
     912:	4291      	cmp	r1, r2
			remainder -= n; 
     914:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
     918:	d1ec      	bne.n	8f4 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
     91a:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
     91c:	3401      	adds	r4, #1
		count += write(buf, count);
     91e:	a902      	add	r1, sp, #8
     920:	4628      	mov	r0, r5
     922:	685b      	ldr	r3, [r3, #4]
     924:	b2e2      	uxtb	r2, r4
     926:	4798      	blx	r3
	}
	return count;
}
     928:	4630      	mov	r0, r6
     92a:	b006      	add	sp, #24
     92c:	ecbd 8b02 	vpop	{d8}
     930:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
     932:	682b      	ldr	r3, [r5, #0]
     934:	2203      	movs	r2, #3
     936:	491a      	ldr	r1, [pc, #104]	; (9a0 <Print::printFloat(double, unsigned char)+0x158>)
     938:	685b      	ldr	r3, [r3, #4]
     93a:	b006      	add	sp, #24
     93c:	ecbd 8b02 	vpop	{d8}
     940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     944:	4718      	bx	r3
     946:	6803      	ldr	r3, [r0, #0]
     948:	2203      	movs	r2, #3
     94a:	4916      	ldr	r1, [pc, #88]	; (9a4 <Print::printFloat(double, unsigned char)+0x15c>)
     94c:	e7f4      	b.n	938 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
     94e:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
     952:	2301      	movs	r3, #1
     954:	e7a0      	b.n	898 <Print::printFloat(double, unsigned char)+0x50>
     956:	6803      	ldr	r3, [r0, #0]
     958:	2203      	movs	r2, #3
     95a:	4913      	ldr	r1, [pc, #76]	; (9a8 <Print::printFloat(double, unsigned char)+0x160>)
     95c:	e7ec      	b.n	938 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
     95e:	ee30 0b07 	vadd.f64	d0, d0, d7
     962:	220a      	movs	r2, #10
     964:	4628      	mov	r0, r5
     966:	eefc 7bc0 	vcvt.u32.f64	s15, d0
     96a:	ee17 1a90 	vmov	r1, s15
}
     96e:	b006      	add	sp, #24
     970:	ecbd 8b02 	vpop	{d8}
     974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     978:	f7ff bf16 	b.w	7a8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
     97c:	f3af 8000 	nop.w
     980:	ffffffff 	.word	0xffffffff
     984:	7fefffff 	.word	0x7fefffff
     988:	e0000000 	.word	0xe0000000
     98c:	41efffff 	.word	0x41efffff
     990:	e0000000 	.word	0xe0000000
     994:	c1efffff 	.word	0xc1efffff
     998:	9999999a 	.word	0x9999999a
     99c:	3fb99999 	.word	0x3fb99999
     9a0:	200003c8 	.word	0x200003c8
     9a4:	200003c4 	.word	0x200003c4
     9a8:	200003c0 	.word	0x200003c0

000009ac <delay>:
	if (msec == 0) return;
     9ac:	b900      	cbnz	r0, 9b0 <delay+0x4>
     9ae:	4770      	bx	lr
{
     9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     9b4:	2101      	movs	r1, #1
     9b6:	4681      	mov	r9, r0
     9b8:	4c21      	ldr	r4, [pc, #132]	; (a40 <delay+0x94>)
     9ba:	4d22      	ldr	r5, [pc, #136]	; (a44 <delay+0x98>)
     9bc:	4e22      	ldr	r6, [pc, #136]	; (a48 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     9be:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     9c2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     9c4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     9c6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     9ca:	2b00      	cmp	r3, #0
     9cc:	d1f7      	bne.n	9be <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     9ce:	491f      	ldr	r1, [pc, #124]	; (a4c <delay+0xa0>)
     9d0:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
     9d2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     9d6:	f8df a078 	ldr.w	sl, [pc, #120]	; a50 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
     9da:	1a1b      	subs	r3, r3, r0
     9dc:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
     9de:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     9e2:	f8da 2000 	ldr.w	r2, [sl]
     9e6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
     9ea:	455a      	cmp	r2, fp
     9ec:	bf94      	ite	ls
     9ee:	4490      	addls	r8, r2
     9f0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     9f2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     9f6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     9f8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     9fa:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     9fe:	2b00      	cmp	r3, #0
     a00:	d1f7      	bne.n	9f2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     a02:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     a04:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
     a08:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
     a0a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     a0e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
     a12:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     a16:	bf94      	ite	ls
     a18:	4462      	addls	r2, ip
     a1a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     a1e:	eba2 0208 	sub.w	r2, r2, r8
     a22:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     a26:	d306      	bcc.n	a36 <delay+0x8a>
			if (--msec == 0) return;
     a28:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     a2c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     a30:	d1df      	bne.n	9f2 <delay+0x46>
}
     a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     a36:	f001 fc4d 	bl	22d4 <yield>
		while ((micros() - start) >= 1000) {
     a3a:	4904      	ldr	r1, [pc, #16]	; (a4c <delay+0xa0>)
     a3c:	e7d9      	b.n	9f2 <delay+0x46>
     a3e:	bf00      	nop
     a40:	2000121c 	.word	0x2000121c
     a44:	20001218 	.word	0x20001218
     a48:	20001214 	.word	0x20001214
     a4c:	e0001000 	.word	0xe0001000
     a50:	20001210 	.word	0x20001210

00000a54 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     a54:	2827      	cmp	r0, #39	; 0x27
     a56:	d816      	bhi.n	a86 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
     a58:	0102      	lsls	r2, r0, #4
     a5a:	4b10      	ldr	r3, [pc, #64]	; (a9c <digitalWrite+0x48>)
     a5c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
     a60:	589b      	ldr	r3, [r3, r2]
{
     a62:	b410      	push	{r4}
	mask = p->mask;
     a64:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
     a66:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
     a68:	4214      	tst	r4, r2
     a6a:	d005      	beq.n	a78 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
     a6c:	b961      	cbnz	r1, a88 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
     a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
     a76:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a78:	6883      	ldr	r3, [r0, #8]
		if (val) {
     a7a:	b151      	cbz	r1, a92 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a7c:	4a08      	ldr	r2, [pc, #32]	; (aa0 <digitalWrite+0x4c>)
}
     a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a82:	601a      	str	r2, [r3, #0]
}
     a84:	4770      	bx	lr
     a86:	4770      	bx	lr
     a88:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
     a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     a90:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     a92:	4a04      	ldr	r2, [pc, #16]	; (aa4 <digitalWrite+0x50>)
}
     a94:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     a98:	601a      	str	r2, [r3, #0]
}
     a9a:	4770      	bx	lr
     a9c:	20000400 	.word	0x20000400
     aa0:	0001f038 	.word	0x0001f038
     aa4:	00013038 	.word	0x00013038

00000aa8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     aa8:	2827      	cmp	r0, #39	; 0x27
     aaa:	d829      	bhi.n	b00 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
     aac:	4b16      	ldr	r3, [pc, #88]	; (b08 <pinMode+0x60>)
     aae:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     ab0:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
     ab2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     ab6:	589a      	ldr	r2, [r3, r2]
{
     ab8:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     aba:	6853      	ldr	r3, [r2, #4]
     abc:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     abe:	d00e      	beq.n	ade <pinMode+0x36>
     ac0:	2904      	cmp	r1, #4
     ac2:	d00c      	beq.n	ade <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     ac4:	ea23 0304 	bic.w	r3, r3, r4
     ac8:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     aca:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
     acc:	b1a9      	cbz	r1, afa <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
     ace:	2902      	cmp	r1, #2
     ad0:	d017      	beq.n	b02 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     ad2:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     ad4:	bf0c      	ite	eq
     ad6:	4a0d      	ldreq	r2, [pc, #52]	; (b0c <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     ad8:	4a0d      	ldrne	r2, [pc, #52]	; (b10 <pinMode+0x68>)
     ada:	601a      	str	r2, [r3, #0]
     adc:	e007      	b.n	aee <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
     ade:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
     ae0:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
     ae2:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     ae4:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
     ae6:	d008      	beq.n	afa <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     ae8:	f640 0238 	movw	r2, #2104	; 0x838
     aec:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     aee:	6843      	ldr	r3, [r0, #4]
     af0:	2215      	movs	r2, #21
}
     af2:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
     af6:	601a      	str	r2, [r3, #0]
}
     af8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
     afa:	2238      	movs	r2, #56	; 0x38
     afc:	601a      	str	r2, [r3, #0]
     afe:	e7f6      	b.n	aee <pinMode+0x46>
     b00:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     b02:	4a04      	ldr	r2, [pc, #16]	; (b14 <pinMode+0x6c>)
     b04:	601a      	str	r2, [r3, #0]
     b06:	e7f2      	b.n	aee <pinMode+0x46>
     b08:	20000400 	.word	0x20000400
     b0c:	00013038 	.word	0x00013038
     b10:	00010038 	.word	0x00010038
     b14:	0001f038 	.word	0x0001f038

00000b18 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     b18:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     b1a:	f7ff fac1 	bl	a0 <setup>
	while (1) {
		loop();
     b1e:	f7ff fb3f 	bl	1a0 <loop>
		yield();
     b22:	f001 fbd7 	bl	22d4 <yield>
	while (1) {
     b26:	e7fa      	b.n	b1e <main+0x6>

00000b28 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
     b28:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
     b2a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
     b2e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
     b32:	d16d      	bne.n	c10 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
     b34:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
     b36:	d341      	bcc.n	bbc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     b38:	f851 3b04 	ldr.w	r3, [r1], #4
     b3c:	f840 3b04 	str.w	r3, [r0], #4
     b40:	f851 3b04 	ldr.w	r3, [r1], #4
     b44:	f840 3b04 	str.w	r3, [r0], #4
     b48:	f851 3b04 	ldr.w	r3, [r1], #4
     b4c:	f840 3b04 	str.w	r3, [r0], #4
     b50:	f851 3b04 	ldr.w	r3, [r1], #4
     b54:	f840 3b04 	str.w	r3, [r0], #4
     b58:	f851 3b04 	ldr.w	r3, [r1], #4
     b5c:	f840 3b04 	str.w	r3, [r0], #4
     b60:	f851 3b04 	ldr.w	r3, [r1], #4
     b64:	f840 3b04 	str.w	r3, [r0], #4
     b68:	f851 3b04 	ldr.w	r3, [r1], #4
     b6c:	f840 3b04 	str.w	r3, [r0], #4
     b70:	f851 3b04 	ldr.w	r3, [r1], #4
     b74:	f840 3b04 	str.w	r3, [r0], #4
     b78:	f851 3b04 	ldr.w	r3, [r1], #4
     b7c:	f840 3b04 	str.w	r3, [r0], #4
     b80:	f851 3b04 	ldr.w	r3, [r1], #4
     b84:	f840 3b04 	str.w	r3, [r0], #4
     b88:	f851 3b04 	ldr.w	r3, [r1], #4
     b8c:	f840 3b04 	str.w	r3, [r0], #4
     b90:	f851 3b04 	ldr.w	r3, [r1], #4
     b94:	f840 3b04 	str.w	r3, [r0], #4
     b98:	f851 3b04 	ldr.w	r3, [r1], #4
     b9c:	f840 3b04 	str.w	r3, [r0], #4
     ba0:	f851 3b04 	ldr.w	r3, [r1], #4
     ba4:	f840 3b04 	str.w	r3, [r0], #4
     ba8:	f851 3b04 	ldr.w	r3, [r1], #4
     bac:	f840 3b04 	str.w	r3, [r0], #4
     bb0:	f851 3b04 	ldr.w	r3, [r1], #4
     bb4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
     bb8:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
     bba:	d2bd      	bcs.n	b38 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
     bbc:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
     bbe:	d311      	bcc.n	be4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     bc0:	f851 3b04 	ldr.w	r3, [r1], #4
     bc4:	f840 3b04 	str.w	r3, [r0], #4
     bc8:	f851 3b04 	ldr.w	r3, [r1], #4
     bcc:	f840 3b04 	str.w	r3, [r0], #4
     bd0:	f851 3b04 	ldr.w	r3, [r1], #4
     bd4:	f840 3b04 	str.w	r3, [r0], #4
     bd8:	f851 3b04 	ldr.w	r3, [r1], #4
     bdc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
     be0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
     be2:	d2ed      	bcs.n	bc0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
     be4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
     be6:	d305      	bcc.n	bf4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
     be8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
     bec:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
     bf0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
     bf2:	d2f9      	bcs.n	be8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
     bf4:	3204      	adds	r2, #4
	beq	.Ldone
     bf6:	d008      	beq.n	c0a <memcpy+0xe2>

	lsls	r2, r2, #31
     bf8:	07d2      	lsls	r2, r2, #31
	itt ne
     bfa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
     bfc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     c00:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
     c04:	d301      	bcc.n	c0a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
     c06:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
     c08:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
     c0a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
     c0c:	4770      	bx	lr
     c0e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
     c10:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
     c12:	d313      	bcc.n	c3c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
     c14:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
     c16:	d08d      	beq.n	b34 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
     c18:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
     c1c:	d08a      	beq.n	b34 <memcpy+0xc>

	rsb	r3, #4
     c1e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
     c22:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
     c24:	07db      	lsls	r3, r3, #31
	itt ne
     c26:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
     c28:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     c2c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
     c30:	d380      	bcc.n	b34 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
     c32:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
     c36:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
     c3a:	e77b      	b.n	b34 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
     c3c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
     c3e:	d3d9      	bcc.n	bf4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
     c40:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
     c42:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
     c46:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
     c4a:	d2f9      	bcs.n	c40 <memcpy+0x118>

	ldrb	r3, [r1]
     c4c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
     c4e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
     c50:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
     c52:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
     c54:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
     c56:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
     c58:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
     c5a:	4770      	bx	lr

00000c5c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
     c5c:	f101 3cff 	add.w	ip, r1, #4294967295
{
     c60:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
     c62:	4666      	mov	r6, ip
	int i=0, j;
     c64:	2400      	movs	r4, #0
     c66:	e000      	b.n	c6a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
     c68:	3401      	adds	r4, #1
		digit = val % radix;
     c6a:	fbb0 f5f2 	udiv	r5, r0, r2
     c6e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     c72:	2b09      	cmp	r3, #9
     c74:	f103 0e37 	add.w	lr, r3, #55	; 0x37
     c78:	f103 0330 	add.w	r3, r3, #48	; 0x30
     c7c:	fa5f fe8e 	uxtb.w	lr, lr
     c80:	bf98      	it	ls
     c82:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
     c86:	4290      	cmp	r0, r2
		val /= radix;
     c88:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     c8a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
     c8e:	d2eb      	bcs.n	c68 <ultoa+0xc>
	}
	buf[i + 1] = 0;
     c90:	1c63      	adds	r3, r4, #1
     c92:	2200      	movs	r2, #0
     c94:	18c8      	adds	r0, r1, r3
     c96:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
     c98:	b17c      	cbz	r4, cba <ultoa+0x5e>
		t = buf[j];
     c9a:	4662      	mov	r2, ip
     c9c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
     ca0:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
     ca4:	eba1 030c 	sub.w	r3, r1, ip
     ca8:	3202      	adds	r2, #2
		buf[j] = buf[i];
     caa:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
     cae:	3b01      	subs	r3, #1
     cb0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
     cb2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
     cb4:	4423      	add	r3, r4
     cb6:	429a      	cmp	r2, r3
     cb8:	dbef      	blt.n	c9a <ultoa+0x3e>
	}
	return buf;
}
     cba:	4608      	mov	r0, r1
     cbc:	bd70      	pop	{r4, r5, r6, pc}
     cbe:	bf00      	nop

00000cc0 <flexpwmFrequency>:
	uint32_t olddiv = p->SM[submodule].VAL1;
     cc0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     cc4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t olddiv = p->SM[submodule].VAL1;
     cc8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
     ccc:	f8b3 c00e 	ldrh.w	ip, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     cd0:	4b31      	ldr	r3, [pc, #196]	; (d98 <flexpwmFrequency+0xd8>)
	uint32_t olddiv = p->SM[submodule].VAL1;
     cd2:	fa1f fc8c 	uxth.w	ip, ip
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     cd6:	ed93 7a00 	vldr	s14, [r3]
     cda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
     cde:	b570      	push	{r4, r5, r6, lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     ce0:	eec7 7a00 	vdiv.f32	s15, s14, s0
	uint16_t mask = 1 << submodule;
     ce4:	f04f 0e01 	mov.w	lr, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
     ce8:	004e      	lsls	r6, r1, #1
	uint16_t mask = 1 << submodule;
     cea:	fa0e fe01 	lsl.w	lr, lr, r1
     cee:	fa1f f58e 	uxth.w	r5, lr
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
     cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     cfa:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65535 && prescale < 7) {
     cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     d02:	d346      	bcc.n	d92 <flexpwmFrequency+0xd2>
	uint32_t prescale = 0;
     d04:	2200      	movs	r2, #0
	while (newdiv > 65535 && prescale < 7) {
     d06:	f64f 74ff 	movw	r4, #65535	; 0xffff
		newdiv = newdiv >> 1;
     d0a:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
     d0c:	3201      	adds	r2, #1
	while (newdiv > 65535 && prescale < 7) {
     d0e:	42a3      	cmp	r3, r4
     d10:	d901      	bls.n	d16 <flexpwmFrequency+0x56>
     d12:	2a06      	cmp	r2, #6
     d14:	d9f9      	bls.n	d0a <flexpwmFrequency+0x4a>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
     d16:	0112      	lsls	r2, r2, #4
     d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     d1c:	b292      	uxth	r2, r2
	if (newdiv > 65535) {
     d1e:	2b02      	cmp	r3, #2
     d20:	f64f 74ff 	movw	r4, #65535	; 0xffff
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     d24:	ea4f 1505 	mov.w	r5, r5, lsl #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
     d28:	4431      	add	r1, r6
     d2a:	bf38      	it	cc
     d2c:	2302      	movcc	r3, #2
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
     d2e:	f00e 0e0f 	and.w	lr, lr, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     d32:	b2ed      	uxtb	r5, r5
     d34:	42a3      	cmp	r3, r4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
     d36:	eb00 1141 	add.w	r1, r0, r1, lsl #5
     d3a:	bf28      	it	cs
     d3c:	4623      	movcs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     d3e:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
     d42:	b2a4      	uxth	r4, r4
     d44:	432c      	orrs	r4, r5
     d46:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
     d4a:	80ca      	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
     d4c:	1e5a      	subs	r2, r3, #1
     d4e:	b292      	uxth	r2, r2
     d50:	81ca      	strh	r2, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
     d52:	894a      	ldrh	r2, [r1, #10]
     d54:	b292      	uxth	r2, r2
     d56:	fb03 f202 	mul.w	r2, r3, r2
     d5a:	fbb2 f2fc 	udiv	r2, r2, ip
     d5e:	b292      	uxth	r2, r2
     d60:	814a      	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
     d62:	8aca      	ldrh	r2, [r1, #22]
     d64:	b292      	uxth	r2, r2
     d66:	fb03 f202 	mul.w	r2, r3, r2
     d6a:	fbb2 f2fc 	udiv	r2, r2, ip
     d6e:	b292      	uxth	r2, r2
     d70:	82ca      	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
     d72:	8bca      	ldrh	r2, [r1, #30]
     d74:	b292      	uxth	r2, r2
     d76:	fb02 f303 	mul.w	r3, r2, r3
     d7a:	fbb3 f3fc 	udiv	r3, r3, ip
     d7e:	b29b      	uxth	r3, r3
     d80:	83cb      	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
     d82:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     d86:	b29b      	uxth	r3, r3
     d88:	ea43 030e 	orr.w	r3, r3, lr
     d8c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
     d90:	bd70      	pop	{r4, r5, r6, pc}
	while (newdiv > 65535 && prescale < 7) {
     d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
     d96:	e7c2      	b.n	d1e <flexpwmFrequency+0x5e>
     d98:	200007b8 	.word	0x200007b8

00000d9c <quadtimerFrequency>:
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     d9c:	4b21      	ldr	r3, [pc, #132]	; (e24 <quadtimerFrequency+0x88>)
     d9e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
     da2:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     da6:	ed93 7a00 	vldr	s14, [r3]
     daa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     dae:	eec7 7a00 	vdiv.f32	s15, s14, s0
     db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
     db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     dba:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
     dbe:	4563      	cmp	r3, ip
     dc0:	d92c      	bls.n	e1c <quadtimerFrequency+0x80>
	uint32_t prescale = 0;
     dc2:	2200      	movs	r2, #0
		newdiv = newdiv >> 1; 
     dc4:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
     dc6:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
     dc8:	4563      	cmp	r3, ip
     dca:	d901      	bls.n	dd0 <quadtimerFrequency+0x34>
     dcc:	2a06      	cmp	r2, #6
     dce:	d9f9      	bls.n	dc4 <quadtimerFrequency+0x28>
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
     dd0:	3208      	adds	r2, #8
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
     dd2:	f242 0c26 	movw	ip, #8230	; 0x2026
     dd6:	ea4c 2c42 	orr.w	ip, ip, r2, lsl #9
     dda:	fa1f fc8c 	uxth.w	ip, ip
	if (newdiv > 65534) {
     dde:	2b02      	cmp	r3, #2
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
     de0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
     de4:	f64f 70fe 	movw	r0, #65534	; 0xfffe
     de8:	bf38      	it	cc
     dea:	2302      	movcc	r3, #2
     dec:	8a0a      	ldrh	r2, [r1, #16]
     dee:	4283      	cmp	r3, r0
     df0:	b292      	uxth	r2, r2
     df2:	bf28      	it	cs
     df4:	4603      	movcs	r3, r0
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
     df6:	88c8      	ldrh	r0, [r1, #6]
     df8:	b280      	uxth	r0, r0
     dfa:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
     dfe:	4410      	add	r0, r2
     e00:	fb03 f202 	mul.w	r2, r3, r2
     e04:	fbb2 f2f0 	udiv	r2, r2, r0
	uint32_t low = newdiv - high;
     e08:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
     e0a:	b292      	uxth	r2, r2
	p->CH[submodule].LOAD = 65537 - low;
     e0c:	f1c3 0301 	rsb	r3, r3, #1
     e10:	b29b      	uxth	r3, r3
     e12:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
     e14:	820a      	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
     e16:	f8a1 c00c 	strh.w	ip, [r1, #12]
}
     e1a:	4770      	bx	lr
	while (newdiv > 65534 && prescale < 7) {
     e1c:	f243 0c26 	movw	ip, #12326	; 0x3026
     e20:	e7dd      	b.n	dde <quadtimerFrequency+0x42>
     e22:	bf00      	nop
     e24:	200007b8 	.word	0x200007b8

00000e28 <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
     e28:	2827      	cmp	r0, #39	; 0x27
     e2a:	d808      	bhi.n	e3e <analogWriteFrequency+0x16>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
     e2c:	4b15      	ldr	r3, [pc, #84]	; (e84 <analogWriteFrequency+0x5c>)
	if (info->type == 1) {
     e2e:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
	info = pwm_pin_info + pin;
     e32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
     e36:	2a01      	cmp	r2, #1
     e38:	d002      	beq.n	e40 <analogWriteFrequency+0x18>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
     e3a:	2a02      	cmp	r2, #2
     e3c:	d00d      	beq.n	e5a <analogWriteFrequency+0x32>
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
	}
}
     e3e:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
     e40:	7859      	ldrb	r1, [r3, #1]
     e42:	f3c1 1201 	ubfx	r2, r1, #4, #2
     e46:	2a03      	cmp	r2, #3
     e48:	d013      	beq.n	e72 <analogWriteFrequency+0x4a>
     e4a:	480f      	ldr	r0, [pc, #60]	; (e88 <analogWriteFrequency+0x60>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
     e4c:	f001 0103 	and.w	r1, r1, #3
     e50:	eb00 3082 	add.w	r0, r0, r2, lsl #14
     e54:	789a      	ldrb	r2, [r3, #2]
     e56:	f7ff bf33 	b.w	cc0 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
     e5a:	7859      	ldrb	r1, [r3, #1]
     e5c:	f3c1 1301 	ubfx	r3, r1, #4, #2
     e60:	2b03      	cmp	r3, #3
     e62:	d00c      	beq.n	e7e <analogWriteFrequency+0x56>
     e64:	4809      	ldr	r0, [pc, #36]	; (e8c <analogWriteFrequency+0x64>)
     e66:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
     e6a:	f001 0103 	and.w	r1, r1, #3
     e6e:	f7ff bf95 	b.w	d9c <quadtimerFrequency>
		switch ((info->module >> 4) & 3) {
     e72:	4807      	ldr	r0, [pc, #28]	; (e90 <analogWriteFrequency+0x68>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
     e74:	f001 0103 	and.w	r1, r1, #3
     e78:	789a      	ldrb	r2, [r3, #2]
     e7a:	f7ff bf21 	b.w	cc0 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
     e7e:	4805      	ldr	r0, [pc, #20]	; (e94 <analogWriteFrequency+0x6c>)
     e80:	e7f3      	b.n	e6a <analogWriteFrequency+0x42>
     e82:	bf00      	nop
     e84:	20000694 	.word	0x20000694
     e88:	403dc000 	.word	0x403dc000
     e8c:	401dc000 	.word	0x401dc000
     e90:	403e8000 	.word	0x403e8000
     e94:	401e8000 	.word	0x401e8000

00000e98 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     e98:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
     e9a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     e9c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
     ea0:	4619      	mov	r1, r3
{
     ea2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     ea4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     ea8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     eac:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     eb0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
     eb4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
     eb8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
     eba:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     ebe:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     ec2:	b29b      	uxth	r3, r3
     ec4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     ec8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     ecc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
     ed0:	3101      	adds	r1, #1
     ed2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
     ed6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     ed8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     eda:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     ede:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     ee0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     ee2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     ee4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     ee6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
     eea:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     eec:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     eee:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     ef0:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
     ef2:	d1eb      	bne.n	ecc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     ef4:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     ef8:	b29b      	uxth	r3, r3
     efa:	f043 030f 	orr.w	r3, r3, #15
     efe:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     f02:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     f06:	b29b      	uxth	r3, r3
     f08:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     f0c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
     f10:	bd10      	pop	{r4, pc}
     f12:	bf00      	nop

00000f14 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     f14:	4b37      	ldr	r3, [pc, #220]	; (ff4 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     f16:	4a38      	ldr	r2, [pc, #224]	; (ff8 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     f18:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     f1a:	4838      	ldr	r0, [pc, #224]	; (ffc <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     f1c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
     f20:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     f22:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     f24:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     f28:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     f2c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     f30:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     f34:	430a      	orrs	r2, r1
     f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
     f3a:	f7ff ffad 	bl	e98 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
     f3e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     f42:	f7ff ffa9 	bl	e98 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
     f46:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     f4a:	f7ff ffa5 	bl	e98 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
     f4e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     f52:	f7ff ffa1 	bl	e98 <flexpwm_init>
	for (i=0; i < 4; i++) {
     f56:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     f58:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     f5c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
     f60:	4611      	mov	r1, r2
     f62:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     f66:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     f6a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     f6c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     f6e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     f70:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     f72:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     f76:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     f78:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     f7a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     f7e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     f80:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
     f82:	d1ee      	bne.n	f62 <pwm_init+0x4e>
     f84:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     f86:	481e      	ldr	r0, [pc, #120]	; (1000 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     f88:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     f8c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
     f90:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     f92:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     f96:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
     f9a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     f9e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     fa2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     fa4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     fa6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     fa8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     faa:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     fae:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     fb0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     fb2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     fb6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     fb8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
     fba:	d1ee      	bne.n	f9a <pwm_init+0x86>
     fbc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     fbe:	4811      	ldr	r0, [pc, #68]	; (1004 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     fc0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     fc2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
     fc6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     fc8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     fcc:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
     fd0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     fd4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     fd8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     fda:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     fdc:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     fde:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     fe0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     fe2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     fe4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     fe6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     fea:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     fec:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
     ff0:	d1ee      	bne.n	fd0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
     ff2:	bd70      	pop	{r4, r5, r6, pc}
     ff4:	400fc000 	.word	0x400fc000
     ff8:	fc030000 	.word	0xfc030000
     ffc:	403dc000 	.word	0x403dc000
    1000:	401e0000 	.word	0x401e0000
    1004:	401e4000 	.word	0x401e4000

00001008 <analogWriteRes>:
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
	analog_write_res = bits;
    1008:	2810      	cmp	r0, #16
    100a:	4603      	mov	r3, r0
	prior = analog_write_res;
    100c:	4a04      	ldr	r2, [pc, #16]	; (1020 <analogWriteRes+0x18>)
	analog_write_res = bits;
    100e:	bf28      	it	cs
    1010:	2310      	movcs	r3, #16
	prior = analog_write_res;
    1012:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    1014:	2b01      	cmp	r3, #1
    1016:	bf38      	it	cc
    1018:	2301      	movcc	r3, #1
    101a:	7013      	strb	r3, [r2, #0]
	return prior;
}
    101c:	4770      	bx	lr
    101e:	bf00      	nop
    1020:	20000836 	.word	0x20000836

00001024 <unused_interrupt_vector>:
	__disable_irq();
    1024:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    1026:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    102a:	4c52      	ldr	r4, [pc, #328]	; (1174 <unused_interrupt_vector+0x150>)
    102c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    1030:	f01e 0f04 	tst.w	lr, #4
    1034:	bf0c      	ite	eq
    1036:	f3ef 8208 	mrseq	r2, MSP
    103a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    103e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    1042:	4e4d      	ldr	r6, [pc, #308]	; (1178 <unused_interrupt_vector+0x154>)
	while (p < end) {
    1044:	4d4d      	ldr	r5, [pc, #308]	; (117c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    1046:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    104a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    104e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    1052:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    1056:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    105a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    105e:	6993      	ldr	r3, [r2, #24]
    1060:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    1064:	69d3      	ldr	r3, [r2, #28]
    1066:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    106a:	f000 f8a3 	bl	11b4 <tempmonGetTemp>
    106e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    1072:	f001 fb47 	bl	2704 <rtc_get>
	info->len = sizeof(*info) / 4;
    1076:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    1078:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    107c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    1080:	460b      	mov	r3, r1
    1082:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    1086:	493e      	ldr	r1, [pc, #248]	; (1180 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    1088:	1d30      	adds	r0, r6, #4
    108a:	405a      	eors	r2, r3
    108c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    108e:	f002 0301 	and.w	r3, r2, #1
    1092:	3c01      	subs	r4, #1
    1094:	fb01 f303 	mul.w	r3, r1, r3
    1098:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    109c:	d1f7      	bne.n	108e <unused_interrupt_vector+0x6a>
	while (p < end) {
    109e:	42a8      	cmp	r0, r5
    10a0:	d002      	beq.n	10a8 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    10a2:	6873      	ldr	r3, [r6, #4]
    10a4:	4606      	mov	r6, r0
    10a6:	e7ef      	b.n	1088 <unused_interrupt_vector+0x64>
	info->crc = crc;
    10a8:	4b32      	ldr	r3, [pc, #200]	; (1174 <unused_interrupt_vector+0x150>)
    10aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    10ae:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    10b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    10b6:	4930      	ldr	r1, [pc, #192]	; (1178 <unused_interrupt_vector+0x154>)
    10b8:	4a32      	ldr	r2, [pc, #200]	; (1184 <unused_interrupt_vector+0x160>)
    10ba:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    10be:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    10c2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    10c6:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    10ca:	4a2f      	ldr	r2, [pc, #188]	; (1188 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    10cc:	2502      	movs	r5, #2
    10ce:	482f      	ldr	r0, [pc, #188]	; (118c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    10d0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    10d2:	492f      	ldr	r1, [pc, #188]	; (1190 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    10d4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    10d8:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    10da:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    10dc:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    10de:	482d      	ldr	r0, [pc, #180]	; (1194 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    10e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    10e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    10e8:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    10ea:	680b      	ldr	r3, [r1, #0]
    10ec:	4283      	cmp	r3, r0
    10ee:	d83d      	bhi.n	116c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    10f0:	4d26      	ldr	r5, [pc, #152]	; (118c <unused_interrupt_vector+0x168>)
    10f2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    10f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    10f8:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    10fc:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    10fe:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    1100:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    1104:	4924      	ldr	r1, [pc, #144]	; (1198 <unused_interrupt_vector+0x174>)
    1106:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    110a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    110e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    1112:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    1116:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    111a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    111e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    1122:	e001      	b.n	1128 <unused_interrupt_vector+0x104>
		usb_isr();
    1124:	f000 f938 	bl	1398 <usb_isr>
		if (PIT_TFLG0) {
    1128:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    112c:	2b00      	cmp	r3, #0
    112e:	d0f9      	beq.n	1124 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    1130:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    1132:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    1136:	2c4f      	cmp	r4, #79	; 0x4f
    1138:	d9f4      	bls.n	1124 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    113a:	4b18      	ldr	r3, [pc, #96]	; (119c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    113c:	2002      	movs	r0, #2
    113e:	4918      	ldr	r1, [pc, #96]	; (11a0 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1140:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    1144:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1148:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    114a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    114e:	b93b      	cbnz	r3, 1160 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    1150:	4814      	ldr	r0, [pc, #80]	; (11a4 <unused_interrupt_vector+0x180>)
    1152:	4915      	ldr	r1, [pc, #84]	; (11a8 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1154:	4a0d      	ldr	r2, [pc, #52]	; (118c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    1156:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1158:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    115c:	2b00      	cmp	r3, #0
    115e:	d0fa      	beq.n	1156 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    1160:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1164:	4a11      	ldr	r2, [pc, #68]	; (11ac <unused_interrupt_vector+0x188>)
    1166:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    116a:	e7fe      	b.n	116a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    116c:	f001 f952 	bl	2414 <set_arm_clock>
    1170:	e7be      	b.n	10f0 <unused_interrupt_vector+0xcc>
    1172:	bf00      	nop
    1174:	2027ff00 	.word	0x2027ff00
    1178:	2027ff80 	.word	0x2027ff80
    117c:	2027ffa8 	.word	0x2027ffa8
    1180:	edb88320 	.word	0xedb88320
    1184:	2027ffa0 	.word	0x2027ffa0
    1188:	400fc000 	.word	0x400fc000
    118c:	40084000 	.word	0x40084000
    1190:	200007bc 	.word	0x200007bc
    1194:	0bcd3d80 	.word	0x0bcd3d80
    1198:	00249f00 	.word	0x00249f00
    119c:	400d9000 	.word	0x400d9000
    11a0:	402e0000 	.word	0x402e0000
    11a4:	400f8000 	.word	0x400f8000
    11a8:	0bad00f1 	.word	0x0bad00f1
    11ac:	05fa0004 	.word	0x05fa0004

000011b0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    11b0:	f7ff bf38 	b.w	1024 <unused_interrupt_vector>

000011b4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    11b4:	4a12      	ldr	r2, [pc, #72]	; (1200 <tempmonGetTemp+0x4c>)
    11b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    11ba:	075b      	lsls	r3, r3, #29
    11bc:	d5fb      	bpl.n	11b6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    11be:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    11c2:	4810      	ldr	r0, [pc, #64]	; (1204 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    11c4:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    11c8:	490f      	ldr	r1, [pc, #60]	; (1208 <tempmonGetTemp+0x54>)
    11ca:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    11ce:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    11d2:	ed91 6a00 	vldr	s12, [r1]
    11d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    11da:	4a0c      	ldr	r2, [pc, #48]	; (120c <tempmonGetTemp+0x58>)
    11dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    11e0:	4b0b      	ldr	r3, [pc, #44]	; (1210 <tempmonGetTemp+0x5c>)
    11e2:	edd2 6a00 	vldr	s13, [r2]
    11e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    11ea:	ed93 7a00 	vldr	s14, [r3]
    11ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    11f2:	ee67 7a86 	vmul.f32	s15, s15, s12
    11f6:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    11fa:	ee37 0a40 	vsub.f32	s0, s14, s0
    11fe:	4770      	bx	lr
    1200:	400d8100 	.word	0x400d8100
    1204:	20001200 	.word	0x20001200
    1208:	20001208 	.word	0x20001208
    120c:	2000120c 	.word	0x2000120c
    1210:	20001204 	.word	0x20001204

00001214 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1214:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    1216:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    1218:	b11b      	cbz	r3, 1222 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    121a:	6853      	ldr	r3, [r2, #4]
    121c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1220:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1222:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1224:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1226:	b33c      	cbz	r4, 1278 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1228:	4b1a      	ldr	r3, [pc, #104]	; (1294 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    122a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    122c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1230:	420c      	tst	r4, r1
    1232:	d11d      	bne.n	1270 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1234:	4e18      	ldr	r6, [pc, #96]	; (1298 <schedule_transfer+0x84>)
    1236:	6877      	ldr	r7, [r6, #4]
    1238:	e004      	b.n	1244 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    123a:	6874      	ldr	r4, [r6, #4]
    123c:	1be4      	subs	r4, r4, r7
    123e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1242:	d20b      	bcs.n	125c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1244:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1248:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    124c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1250:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1254:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1258:	0464      	lsls	r4, r4, #17
    125a:	d5ee      	bpl.n	123a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    125c:	400d      	ands	r5, r1
    125e:	d107      	bne.n	1270 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    1260:	4c0c      	ldr	r4, [pc, #48]	; (1294 <schedule_transfer+0x80>)
		endpoint->status = 0;
    1262:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    1266:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    126a:	430b      	orrs	r3, r1
    126c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1270:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1272:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1274:	bcf0      	pop	{r4, r5, r6, r7}
    1276:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    1278:	4d06      	ldr	r5, [pc, #24]	; (1294 <schedule_transfer+0x80>)
	endpoint->status = 0;
    127a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    127e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    1282:	430b      	orrs	r3, r1
    1284:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1288:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    128a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    128c:	b662      	cpsie	i
}
    128e:	bcf0      	pop	{r4, r5, r6, r7}
    1290:	4770      	bx	lr
    1292:	bf00      	nop
    1294:	402e0000 	.word	0x402e0000
    1298:	e0001000 	.word	0xe0001000

0000129c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    129c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    129e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    12a0:	b19d      	cbz	r5, 12ca <run_callbacks+0x2e>
    12a2:	4606      	mov	r6, r0
    12a4:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    12a6:	2400      	movs	r4, #0
    12a8:	e003      	b.n	12b2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    12aa:	6812      	ldr	r2, [r2, #0]
		count++;
    12ac:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    12ae:	2a01      	cmp	r2, #1
    12b0:	d00c      	beq.n	12cc <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    12b2:	6853      	ldr	r3, [r2, #4]
    12b4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    12b8:	d0f7      	beq.n	12aa <run_callbacks+0xe>
			ep->first_transfer = t;
    12ba:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    12bc:	b12c      	cbz	r4, 12ca <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    12be:	4628      	mov	r0, r5
		ep->callback_function(first);
    12c0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    12c2:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    12c4:	4798      	blx	r3
	while (count) {
    12c6:	3c01      	subs	r4, #1
    12c8:	d1f9      	bne.n	12be <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    12ca:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    12cc:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    12d0:	e7f4      	b.n	12bc <run_callbacks+0x20>
    12d2:	bf00      	nop

000012d4 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    12d4:	b430      	push	{r4, r5}
	if (len > 0) {
    12d6:	b9d9      	cbnz	r1, 1310 <endpoint0_transmit.constprop.0+0x3c>
    12d8:	4c1f      	ldr	r4, [pc, #124]	; (1358 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    12da:	4b20      	ldr	r3, [pc, #128]	; (135c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    12dc:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12de:	4a20      	ldr	r2, [pc, #128]	; (1360 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    12e0:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12e2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    12e6:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    12e8:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    12ea:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12ee:	2480      	movs	r4, #128	; 0x80
    12f0:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12f2:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    12f6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    12fa:	481a      	ldr	r0, [pc, #104]	; (1364 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    12fc:	432b      	orrs	r3, r5
    12fe:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1302:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    1304:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1308:	2b00      	cmp	r3, #0
    130a:	d1fb      	bne.n	1304 <endpoint0_transmit.constprop.0+0x30>
}
    130c:	bc30      	pop	{r4, r5}
    130e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1310:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    1312:	4b15      	ldr	r3, [pc, #84]	; (1368 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1314:	4c10      	ldr	r4, [pc, #64]	; (1358 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    1316:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1318:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    131c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    131e:	4a10      	ldr	r2, [pc, #64]	; (1360 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1320:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1322:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    1326:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1328:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    132a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    132e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1330:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1332:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1336:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    133a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    133c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    133e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    1340:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    1342:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    134a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    134e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1352:	2b00      	cmp	r3, #0
    1354:	d1fb      	bne.n	134e <endpoint0_transmit.constprop.0+0x7a>
    1356:	e7c0      	b.n	12da <endpoint0_transmit.constprop.0+0x6>
    1358:	20000000 	.word	0x20000000
    135c:	20000ec0 	.word	0x20000ec0
    1360:	402e0000 	.word	0x402e0000
    1364:	200011a8 	.word	0x200011a8
    1368:	20000ee0 	.word	0x20000ee0

0000136c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    136c:	4908      	ldr	r1, [pc, #32]	; (1390 <usb_stop_sof_interrupts+0x24>)
    136e:	2201      	movs	r2, #1
    1370:	780b      	ldrb	r3, [r1, #0]
    1372:	fa02 f000 	lsl.w	r0, r2, r0
    1376:	ea23 0000 	bic.w	r0, r3, r0
    137a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    137c:	b930      	cbnz	r0, 138c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    137e:	4a05      	ldr	r2, [pc, #20]	; (1394 <usb_stop_sof_interrupts+0x28>)
    1380:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    1384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1388:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    138c:	4770      	bx	lr
    138e:	bf00      	nop
    1390:	20001240 	.word	0x20001240
    1394:	402e0000 	.word	0x402e0000

00001398 <usb_isr>:
{
    1398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    139c:	4c97      	ldr	r4, [pc, #604]	; (15fc <usb_isr+0x264>)
{
    139e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    13a0:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    13a4:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    13a6:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    13aa:	d553      	bpl.n	1454 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    13ac:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    13b0:	2a00      	cmp	r2, #0
    13b2:	d04a      	beq.n	144a <usb_isr+0xb2>
    13b4:	4e92      	ldr	r6, [pc, #584]	; (1600 <usb_isr+0x268>)
    13b6:	f8df a260 	ldr.w	sl, [pc, #608]	; 1618 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    13ba:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1630 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    13be:	f8df b274 	ldr.w	fp, [pc, #628]	; 1634 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    13c2:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1638 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    13c6:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    13ca:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    13ce:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    13d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    13d6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    13da:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    13de:	049d      	lsls	r5, r3, #18
    13e0:	d5f5      	bpl.n	13ce <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    13e2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    13e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    13ea:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    13ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    13f2:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    13f6:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    13fa:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    13fe:	d1fa      	bne.n	13f6 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    1400:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    1402:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    1404:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    1408:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    140c:	f000 81cf 	beq.w	17ae <usb_isr+0x416>
    1410:	f200 80db 	bhi.w	15ca <usb_isr+0x232>
    1414:	f240 3102 	movw	r1, #770	; 0x302
    1418:	428b      	cmp	r3, r1
    141a:	f000 81e7 	beq.w	17ec <usb_isr+0x454>
    141e:	f200 809a 	bhi.w	1556 <usb_isr+0x1be>
    1422:	2b82      	cmp	r3, #130	; 0x82
    1424:	f000 81cb 	beq.w	17be <usb_isr+0x426>
    1428:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    142c:	f040 808a 	bne.w	1544 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    1430:	f010 0f78 	tst.w	r0, #120	; 0x78
    1434:	b283      	uxth	r3, r0
    1436:	f000 8203 	beq.w	1840 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    143a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    143e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1442:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1446:	2a00      	cmp	r2, #0
    1448:	d1bd      	bne.n	13c6 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    144a:	4a6c      	ldr	r2, [pc, #432]	; (15fc <usb_isr+0x264>)
    144c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1450:	2b00      	cmp	r3, #0
    1452:	d142      	bne.n	14da <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1454:	067e      	lsls	r6, r7, #25
    1456:	d516      	bpl.n	1486 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1458:	4b68      	ldr	r3, [pc, #416]	; (15fc <usb_isr+0x264>)
    145a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    145e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1462:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    1466:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    146a:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    146e:	2c00      	cmp	r4, #0
    1470:	d1fb      	bne.n	146a <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1472:	f04f 32ff 	mov.w	r2, #4294967295
    1476:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    147a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    147e:	f000 fd2d 	bl	1edc <usb_serial_reset>
		endpointN_notify_mask = 0;
    1482:	4b60      	ldr	r3, [pc, #384]	; (1604 <usb_isr+0x26c>)
    1484:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    1486:	01fc      	lsls	r4, r7, #7
    1488:	d503      	bpl.n	1492 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    148a:	4b5f      	ldr	r3, [pc, #380]	; (1608 <usb_isr+0x270>)
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	b103      	cbz	r3, 1492 <usb_isr+0xfa>
    1490:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    1492:	01b8      	lsls	r0, r7, #6
    1494:	d503      	bpl.n	149e <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1496:	4b5d      	ldr	r3, [pc, #372]	; (160c <usb_isr+0x274>)
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	b103      	cbz	r3, 149e <usb_isr+0x106>
    149c:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    149e:	0779      	lsls	r1, r7, #29
    14a0:	d508      	bpl.n	14b4 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    14a2:	4b56      	ldr	r3, [pc, #344]	; (15fc <usb_isr+0x264>)
    14a4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    14a8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    14ac:	d047      	beq.n	153e <usb_isr+0x1a6>
			usb_high_speed = 1;
    14ae:	4b58      	ldr	r3, [pc, #352]	; (1610 <usb_isr+0x278>)
    14b0:	2201      	movs	r2, #1
    14b2:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    14b4:	4b51      	ldr	r3, [pc, #324]	; (15fc <usb_isr+0x264>)
    14b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    14ba:	061a      	lsls	r2, r3, #24
    14bc:	d50a      	bpl.n	14d4 <usb_isr+0x13c>
    14be:	063b      	lsls	r3, r7, #24
    14c0:	d508      	bpl.n	14d4 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    14c2:	4a54      	ldr	r2, [pc, #336]	; (1614 <usb_isr+0x27c>)
    14c4:	7813      	ldrb	r3, [r2, #0]
    14c6:	b12b      	cbz	r3, 14d4 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    14c8:	3b01      	subs	r3, #1
    14ca:	b2db      	uxtb	r3, r3
    14cc:	7013      	strb	r3, [r2, #0]
    14ce:	2b00      	cmp	r3, #0
    14d0:	f000 8272 	beq.w	19b8 <usb_isr+0x620>
}
    14d4:	b003      	add	sp, #12
    14d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    14da:	494f      	ldr	r1, [pc, #316]	; (1618 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    14dc:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    14e0:	6808      	ldr	r0, [r1, #0]
    14e2:	4203      	tst	r3, r0
    14e4:	f040 81d1 	bne.w	188a <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    14e8:	4a46      	ldr	r2, [pc, #280]	; (1604 <usb_isr+0x26c>)
    14ea:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    14ec:	401c      	ands	r4, r3
    14ee:	d0b1      	beq.n	1454 <usb_isr+0xbc>
				while (tx) {
    14f0:	ea5f 4814 	movs.w	r8, r4, lsr #16
    14f4:	d010      	beq.n	1518 <usb_isr+0x180>
    14f6:	4e42      	ldr	r6, [pc, #264]	; (1600 <usb_isr+0x268>)
					tx &= ~(1<<p);
    14f8:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    14fc:	fa98 f5a8 	rbit	r5, r8
    1500:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1504:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    1508:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    150c:	3040      	adds	r0, #64	; 0x40
    150e:	f7ff fec5 	bl	129c <run_callbacks>
				while (tx) {
    1512:	ea38 0805 	bics.w	r8, r8, r5
    1516:	d1f1      	bne.n	14fc <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    1518:	b2a4      	uxth	r4, r4
				while(rx) {
    151a:	2c00      	cmp	r4, #0
    151c:	d09a      	beq.n	1454 <usb_isr+0xbc>
    151e:	4e38      	ldr	r6, [pc, #224]	; (1600 <usb_isr+0x268>)
					rx &= ~(1<<p);
    1520:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    1524:	fa94 f5a4 	rbit	r5, r4
    1528:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    152c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    1530:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1534:	f7ff feb2 	bl	129c <run_callbacks>
				while(rx) {
    1538:	43ac      	bics	r4, r5
    153a:	d1f3      	bne.n	1524 <usb_isr+0x18c>
    153c:	e78a      	b.n	1454 <usb_isr+0xbc>
			usb_high_speed = 0;
    153e:	4a34      	ldr	r2, [pc, #208]	; (1610 <usb_isr+0x278>)
    1540:	7013      	strb	r3, [r2, #0]
    1542:	e7b7      	b.n	14b4 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    1544:	2b80      	cmp	r3, #128	; 0x80
    1546:	f47f af78 	bne.w	143a <usb_isr+0xa2>
		reply_buffer[0] = 0;
    154a:	4834      	ldr	r0, [pc, #208]	; (161c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    154c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    154e:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1550:	f7ff fec0 	bl	12d4 <endpoint0_transmit.constprop.0>
		return;
    1554:	e775      	b.n	1442 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    1556:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    155a:	f000 810b 	beq.w	1774 <usb_isr+0x3dc>
    155e:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    1562:	2b01      	cmp	r3, #1
    1564:	f63f af69 	bhi.w	143a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1568:	4b2d      	ldr	r3, [pc, #180]	; (1620 <usb_isr+0x288>)
    156a:	685d      	ldr	r5, [r3, #4]
    156c:	2d00      	cmp	r5, #0
    156e:	f43f af64 	beq.w	143a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1572:	fa1f fc8c 	uxth.w	ip, ip
    1576:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    157a:	e004      	b.n	1586 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    157c:	691d      	ldr	r5, [r3, #16]
    157e:	330c      	adds	r3, #12
    1580:	2d00      	cmp	r5, #0
    1582:	f43f af5a 	beq.w	143a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1586:	881a      	ldrh	r2, [r3, #0]
    1588:	4572      	cmp	r2, lr
    158a:	d1f7      	bne.n	157c <usb_isr+0x1e4>
    158c:	885a      	ldrh	r2, [r3, #2]
    158e:	4562      	cmp	r2, ip
    1590:	d1f4      	bne.n	157c <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    1592:	ea4f 221e 	mov.w	r2, lr, lsr #8
    1596:	2a03      	cmp	r2, #3
    1598:	f000 81a5 	beq.w	18e6 <usb_isr+0x54e>
					datalen = list->length;
    159c:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    159e:	0c00      	lsrs	r0, r0, #16
    15a0:	4282      	cmp	r2, r0
    15a2:	bf28      	it	cs
    15a4:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    15a6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    15aa:	f040 81a1 	bne.w	18f0 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    15ae:	4b18      	ldr	r3, [pc, #96]	; (1610 <usb_isr+0x278>)
    15b0:	491c      	ldr	r1, [pc, #112]	; (1624 <usb_isr+0x28c>)
    15b2:	7818      	ldrb	r0, [r3, #0]
    15b4:	4b1c      	ldr	r3, [pc, #112]	; (1628 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    15b6:	9201      	str	r2, [sp, #4]
    15b8:	2800      	cmp	r0, #0
    15ba:	bf18      	it	ne
    15bc:	4619      	movne	r1, r3
    15be:	481b      	ldr	r0, [pc, #108]	; (162c <usb_isr+0x294>)
    15c0:	f7ff fab2 	bl	b28 <memcpy>
    15c4:	4d19      	ldr	r5, [pc, #100]	; (162c <usb_isr+0x294>)
    15c6:	9a01      	ldr	r2, [sp, #4]
    15c8:	e1e1      	b.n	198e <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    15ca:	f242 2121 	movw	r1, #8737	; 0x2221
    15ce:	428b      	cmp	r3, r1
    15d0:	d07c      	beq.n	16cc <usb_isr+0x334>
    15d2:	d933      	bls.n	163c <usb_isr+0x2a4>
    15d4:	f242 3121 	movw	r1, #8993	; 0x2321
    15d8:	428b      	cmp	r3, r1
    15da:	f000 8081 	beq.w	16e0 <usb_isr+0x348>
    15de:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    15e2:	428b      	cmp	r3, r1
    15e4:	f47f af29 	bne.w	143a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    15e8:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    15ec:	b283      	uxth	r3, r0
    15ee:	f47f af24 	bne.w	143a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    15f2:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    15f6:	f363 0c0f 	bfi	ip, r3, #0, #16
    15fa:	e7b5      	b.n	1568 <usb_isr+0x1d0>
    15fc:	402e0000 	.word	0x402e0000
    1600:	20000000 	.word	0x20000000
    1604:	200011ac 	.word	0x200011ac
    1608:	2000122c 	.word	0x2000122c
    160c:	20001230 	.word	0x20001230
    1610:	20001246 	.word	0x20001246
    1614:	20001247 	.word	0x20001247
    1618:	200011a8 	.word	0x200011a8
    161c:	200011c8 	.word	0x200011c8
    1620:	20000734 	.word	0x20000734
    1624:	60001b2c 	.word	0x60001b2c
    1628:	60001b90 	.word	0x60001b90
    162c:	20200000 	.word	0x20200000
    1630:	200011a0 	.word	0x200011a0
    1634:	b8c6cf5d 	.word	0xb8c6cf5d
    1638:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    163c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1640:	d066      	beq.n	1710 <usb_isr+0x378>
    1642:	f242 0121 	movw	r1, #8225	; 0x2021
    1646:	428b      	cmp	r3, r1
    1648:	f47f aef7 	bne.w	143a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    164c:	0c03      	lsrs	r3, r0, #16
    164e:	2b07      	cmp	r3, #7
    1650:	f47f aef3 	bne.w	143a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    1654:	4bb2      	ldr	r3, [pc, #712]	; (1920 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1656:	49b3      	ldr	r1, [pc, #716]	; (1924 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    1658:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    165a:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    165c:	49b2      	ldr	r1, [pc, #712]	; (1928 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    165e:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1660:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    1664:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    1668:	2201      	movs	r2, #1
    166a:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    166c:	4aaf      	ldr	r2, [pc, #700]	; (192c <usb_isr+0x594>)
    166e:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1670:	4aaf      	ldr	r2, [pc, #700]	; (1930 <usb_isr+0x598>)
    1672:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    1674:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    1678:	f041 0101 	orr.w	r1, r1, #1
    167c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1680:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1684:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1688:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    168a:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    168c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1690:	2b00      	cmp	r3, #0
    1692:	d1fb      	bne.n	168c <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    1694:	4aa7      	ldr	r2, [pc, #668]	; (1934 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1696:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1698:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    169a:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    169c:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    169e:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16a0:	f248 0380 	movw	r3, #32896	; 0x8080
    16a4:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    16a6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    16aa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    16ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    16b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    16b6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    16ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    16be:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    16c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    16c6:	2b00      	cmp	r3, #0
    16c8:	d1fb      	bne.n	16c2 <usb_isr+0x32a>
    16ca:	e6ba      	b.n	1442 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    16cc:	b280      	uxth	r0, r0
    16ce:	b938      	cbnz	r0, 16e0 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    16d0:	4b99      	ldr	r3, [pc, #612]	; (1938 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    16d2:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    16d6:	6819      	ldr	r1, [r3, #0]
    16d8:	4b98      	ldr	r3, [pc, #608]	; (193c <usb_isr+0x5a4>)
    16da:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    16dc:	4b98      	ldr	r3, [pc, #608]	; (1940 <usb_isr+0x5a8>)
    16de:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    16e0:	4b94      	ldr	r3, [pc, #592]	; (1934 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    16e2:	2200      	movs	r2, #0
    16e4:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    16e6:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    16e8:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    16ea:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    16ec:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16ee:	2280      	movs	r2, #128	; 0x80
    16f0:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    16f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    16f6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    16fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    16fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1702:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1706:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    170a:	2b00      	cmp	r3, #0
    170c:	d1fb      	bne.n	1706 <usb_isr+0x36e>
    170e:	e698      	b.n	1442 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    1710:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1714:	4b8b      	ldr	r3, [pc, #556]	; (1944 <usb_isr+0x5ac>)
    1716:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1718:	4b8b      	ldr	r3, [pc, #556]	; (1948 <usb_isr+0x5b0>)
    171a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    171e:	4b8b      	ldr	r3, [pc, #556]	; (194c <usb_isr+0x5b4>)
    1720:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1724:	4b8a      	ldr	r3, [pc, #552]	; (1950 <usb_isr+0x5b8>)
    1726:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    172a:	f000 fbd9 	bl	1ee0 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    172e:	2280      	movs	r2, #128	; 0x80
    1730:	4629      	mov	r1, r5
    1732:	4888      	ldr	r0, [pc, #544]	; (1954 <usb_isr+0x5bc>)
    1734:	f001 f874 	bl	2820 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1738:	4b87      	ldr	r3, [pc, #540]	; (1958 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    173a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    173c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1740:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    1744:	4b7b      	ldr	r3, [pc, #492]	; (1934 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1746:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1748:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    174a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    174c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    174e:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1750:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1752:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1756:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    175a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    175e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1762:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1766:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    176a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    176e:	2b00      	cmp	r3, #0
    1770:	d1fb      	bne.n	176a <usb_isr+0x3d2>
    1772:	e666      	b.n	1442 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    1774:	4b6f      	ldr	r3, [pc, #444]	; (1934 <usb_isr+0x59c>)
    1776:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    1778:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    177a:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    177c:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    177e:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1780:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1782:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1784:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1788:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    178c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1794:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1798:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    179c:	2b00      	cmp	r3, #0
    179e:	d1fb      	bne.n	1798 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    17a0:	0c13      	lsrs	r3, r2, #16
    17a2:	065b      	lsls	r3, r3, #25
    17a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    17a8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    17ac:	e649      	b.n	1442 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    17ae:	4b65      	ldr	r3, [pc, #404]	; (1944 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    17b0:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    17b2:	486a      	ldr	r0, [pc, #424]	; (195c <usb_isr+0x5c4>)
    17b4:	781b      	ldrb	r3, [r3, #0]
    17b6:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    17b8:	f7ff fd8c 	bl	12d4 <endpoint0_transmit.constprop.0>
		return;
    17bc:	e641      	b.n	1442 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    17be:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    17c0:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    17c4:	f47f ae39 	bne.w	143a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    17c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    17cc:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    17d0:	4a62      	ldr	r2, [pc, #392]	; (195c <usb_isr+0x5c4>)
    17d2:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    17d4:	0618      	lsls	r0, r3, #24
    17d6:	f100 809e 	bmi.w	1916 <usb_isr+0x57e>
    17da:	07cb      	lsls	r3, r1, #31
    17dc:	d501      	bpl.n	17e2 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    17de:	2301      	movs	r3, #1
    17e0:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    17e2:	2102      	movs	r1, #2
    17e4:	485d      	ldr	r0, [pc, #372]	; (195c <usb_isr+0x5c4>)
    17e6:	f7ff fd75 	bl	12d4 <endpoint0_transmit.constprop.0>
		return;
    17ea:	e62a      	b.n	1442 <usb_isr+0xaa>
		if (endpoint > 7) break;
    17ec:	f010 0f78 	tst.w	r0, #120	; 0x78
    17f0:	b283      	uxth	r3, r0
    17f2:	f47f ae22 	bne.w	143a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    17f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    17fa:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    17fe:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1802:	bf14      	ite	ne
    1804:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1808:	f043 0301 	orreq.w	r3, r3, #1
    180c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    1810:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1812:	4b48      	ldr	r3, [pc, #288]	; (1934 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1814:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1816:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1818:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    181a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    181c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    181e:	2280      	movs	r2, #128	; 0x80
    1820:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1822:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1826:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    182a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1832:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1836:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    183a:	2b00      	cmp	r3, #0
    183c:	d1fb      	bne.n	1836 <usb_isr+0x49e>
    183e:	e600      	b.n	1442 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    1840:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    1844:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1848:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    184c:	bf14      	ite	ne
    184e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1852:	f023 0301 	biceq.w	r3, r3, #1
    1856:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    185a:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    185c:	4b35      	ldr	r3, [pc, #212]	; (1934 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    185e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1860:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1862:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1864:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1866:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1868:	2280      	movs	r2, #128	; 0x80
    186a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    186c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1870:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1874:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    187c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1880:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1884:	2b00      	cmp	r3, #0
    1886:	d1fb      	bne.n	1880 <usb_isr+0x4e8>
    1888:	e5db      	b.n	1442 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    188a:	2000      	movs	r0, #0
    188c:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    188e:	4926      	ldr	r1, [pc, #152]	; (1928 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1890:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1892:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1894:	f242 0121 	movw	r1, #8225	; 0x2021
    1898:	428c      	cmp	r4, r1
    189a:	f47f ae25 	bne.w	14e8 <usb_isr+0x150>
    189e:	b280      	uxth	r0, r0
    18a0:	2800      	cmp	r0, #0
    18a2:	f47f ae21 	bne.w	14e8 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    18a6:	492e      	ldr	r1, [pc, #184]	; (1960 <usb_isr+0x5c8>)
    18a8:	4c2e      	ldr	r4, [pc, #184]	; (1964 <usb_isr+0x5cc>)
    18aa:	c903      	ldmia	r1, {r0, r1}
    18ac:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    18ae:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    18b0:	ea4f 4111 	mov.w	r1, r1, lsr #16
    18b4:	6020      	str	r0, [r4, #0]
    18b6:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    18b8:	f47f ae16 	bne.w	14e8 <usb_isr+0x150>
	__disable_irq();
    18bc:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    18be:	482a      	ldr	r0, [pc, #168]	; (1968 <usb_isr+0x5d0>)
    18c0:	7801      	ldrb	r1, [r0, #0]
    18c2:	f041 0108 	orr.w	r1, r1, #8
    18c6:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    18c8:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    18cc:	060d      	lsls	r5, r1, #24
    18ce:	d405      	bmi.n	18dc <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    18d0:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    18d2:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    18d4:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    18d8:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    18dc:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    18de:	4a23      	ldr	r2, [pc, #140]	; (196c <usb_isr+0x5d4>)
    18e0:	2150      	movs	r1, #80	; 0x50
    18e2:	7011      	strb	r1, [r2, #0]
    18e4:	e600      	b.n	14e8 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    18e6:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    18e8:	782a      	ldrb	r2, [r5, #0]
    18ea:	4282      	cmp	r2, r0
    18ec:	bf28      	it	cs
    18ee:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    18f0:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    18f4:	d144      	bne.n	1980 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    18f6:	4b1e      	ldr	r3, [pc, #120]	; (1970 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    18f8:	4d1e      	ldr	r5, [pc, #120]	; (1974 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    18fa:	7818      	ldrb	r0, [r3, #0]
    18fc:	491e      	ldr	r1, [pc, #120]	; (1978 <usb_isr+0x5e0>)
    18fe:	4b1f      	ldr	r3, [pc, #124]	; (197c <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1900:	9201      	str	r2, [sp, #4]
    1902:	2800      	cmp	r0, #0
    1904:	bf18      	it	ne
    1906:	4619      	movne	r1, r3
    1908:	4628      	mov	r0, r5
    190a:	f7ff f90d 	bl	b28 <memcpy>
					usb_descriptor_buffer[1] = 7;
    190e:	2307      	movs	r3, #7
    1910:	706b      	strb	r3, [r5, #1]
    1912:	9a01      	ldr	r2, [sp, #4]
    1914:	e03b      	b.n	198e <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1916:	03c9      	lsls	r1, r1, #15
    1918:	f53f af61 	bmi.w	17de <usb_isr+0x446>
    191c:	e761      	b.n	17e2 <usb_isr+0x44a>
    191e:	bf00      	nop
    1920:	20000ee0 	.word	0x20000ee0
    1924:	200021a0 	.word	0x200021a0
    1928:	20001080 	.word	0x20001080
    192c:	00070080 	.word	0x00070080
    1930:	200031a0 	.word	0x200031a0
    1934:	20000ec0 	.word	0x20000ec0
    1938:	20001218 	.word	0x20001218
    193c:	20001228 	.word	0x20001228
    1940:	20001244 	.word	0x20001244
    1944:	20001245 	.word	0x20001245
    1948:	00cc0002 	.word	0x00cc0002
    194c:	000200c8 	.word	0x000200c8
    1950:	00c80002 	.word	0x00c80002
    1954:	20000080 	.word	0x20000080
    1958:	74d59319 	.word	0x74d59319
    195c:	200011c8 	.word	0x200011c8
    1960:	200011a0 	.word	0x200011a0
    1964:	20001220 	.word	0x20001220
    1968:	20001240 	.word	0x20001240
    196c:	20001247 	.word	0x20001247
    1970:	20001246 	.word	0x20001246
    1974:	20200000 	.word	0x20200000
    1978:	60001b90 	.word	0x60001b90
    197c:	60001b2c 	.word	0x60001b2c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1980:	4629      	mov	r1, r5
    1982:	4d10      	ldr	r5, [pc, #64]	; (19c4 <usb_isr+0x62c>)
    1984:	9201      	str	r2, [sp, #4]
    1986:	4628      	mov	r0, r5
    1988:	f7ff f8ce 	bl	b28 <memcpy>
    198c:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    198e:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1992:	4415      	add	r5, r2
	asm("dsb");
    1994:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1998:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    199c:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    19a0:	3320      	adds	r3, #32
	} while (location < end_addr);
    19a2:	429d      	cmp	r5, r3
    19a4:	d8fa      	bhi.n	199c <usb_isr+0x604>
	asm("dsb");
    19a6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    19aa:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    19ae:	4805      	ldr	r0, [pc, #20]	; (19c4 <usb_isr+0x62c>)
    19b0:	4611      	mov	r1, r2
    19b2:	f7ff fc8f 	bl	12d4 <endpoint0_transmit.constprop.0>
				return;
    19b6:	e544      	b.n	1442 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    19b8:	2003      	movs	r0, #3
    19ba:	f7ff fcd7 	bl	136c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    19be:	f000 ffa7 	bl	2910 <___reboot_Teensyduino__veneer>
    19c2:	bf00      	nop
    19c4:	20200000 	.word	0x20200000

000019c8 <usb_config_rx>:
{
    19c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19cc:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    19ce:	1e83      	subs	r3, r0, #2
    19d0:	2b02      	cmp	r3, #2
    19d2:	d901      	bls.n	19d8 <usb_config_rx+0x10>
}
    19d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    19d8:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1a28 <usb_config_rx+0x60>
    19dc:	4615      	mov	r5, r2
    19de:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    19e0:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    19e2:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    19e6:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    19e8:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    19ec:	2100      	movs	r1, #0
    19ee:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    19f2:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    19f4:	f000 ff14 	bl	2820 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    19f8:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    19fc:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    19fe:	0952      	lsrs	r2, r2, #5
    1a00:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    1a04:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    1a08:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1a0c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    1a10:	2f00      	cmp	r7, #0
    1a12:	d0df      	beq.n	19d4 <usb_config_rx+0xc>
    1a14:	4a03      	ldr	r2, [pc, #12]	; (1a24 <usb_config_rx+0x5c>)
    1a16:	40b3      	lsls	r3, r6
    1a18:	6811      	ldr	r1, [r2, #0]
    1a1a:	430b      	orrs	r3, r1
    1a1c:	6013      	str	r3, [r2, #0]
}
    1a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a22:	bf00      	nop
    1a24:	200011ac 	.word	0x200011ac
    1a28:	20000000 	.word	0x20000000

00001a2c <usb_config_tx>:
{
    1a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a30:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1a32:	1e81      	subs	r1, r0, #2
    1a34:	2902      	cmp	r1, #2
    1a36:	d901      	bls.n	1a3c <usb_config_tx+0x10>
}
    1a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1a3c:	01c7      	lsls	r7, r0, #7
    1a3e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1a8c <usb_config_tx+0x60>
    1a42:	4692      	mov	sl, r2
    1a44:	4604      	mov	r4, r0
    1a46:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    1a48:	223c      	movs	r2, #60	; 0x3c
    1a4a:	2100      	movs	r1, #0
    1a4c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1a4e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a52:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    1a54:	f108 0004 	add.w	r0, r8, #4
    1a58:	f000 fee2 	bl	2820 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a5c:	faba f28a 	clz	r2, sl
    1a60:	0952      	lsrs	r2, r2, #5
    1a62:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    1a66:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    1a6a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    1a6c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1a70:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1a74:	2e00      	cmp	r6, #0
    1a76:	d0df      	beq.n	1a38 <usb_config_tx+0xc>
    1a78:	4b03      	ldr	r3, [pc, #12]	; (1a88 <usb_config_tx+0x5c>)
    1a7a:	3410      	adds	r4, #16
    1a7c:	6819      	ldr	r1, [r3, #0]
    1a7e:	40a2      	lsls	r2, r4
    1a80:	430a      	orrs	r2, r1
    1a82:	601a      	str	r2, [r3, #0]
}
    1a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a88:	200011ac 	.word	0x200011ac
    1a8c:	20000000 	.word	0x20000000

00001a90 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    1a90:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    1a92:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    1a94:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    1a96:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    1a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    1a9e:	b410      	push	{r4}
	transfer->next = 1;
    1aa0:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    1aa2:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    1aa4:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    1aa8:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    1aaa:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    1aae:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    1ab2:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    1ab4:	6181      	str	r1, [r0, #24]
}
    1ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    1aba:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    1abe:	4770      	bx	lr

00001ac0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1ac0:	1e83      	subs	r3, r0, #2
{
    1ac2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1ac4:	2b02      	cmp	r3, #2
    1ac6:	d900      	bls.n	1aca <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    1ac8:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1aca:	4b06      	ldr	r3, [pc, #24]	; (1ae4 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    1acc:	f100 0110 	add.w	r1, r0, #16
    1ad0:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1ad4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    1ad8:	fa0c f101 	lsl.w	r1, ip, r1
    1adc:	3040      	adds	r0, #64	; 0x40
    1ade:	f7ff bb99 	b.w	1214 <schedule_transfer>
    1ae2:	bf00      	nop
    1ae4:	20000000 	.word	0x20000000

00001ae8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1ae8:	1e83      	subs	r3, r0, #2
{
    1aea:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1aec:	2b02      	cmp	r3, #2
    1aee:	d900      	bls.n	1af2 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    1af0:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    1af2:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    1af4:	4b02      	ldr	r3, [pc, #8]	; (1b00 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    1af6:	4081      	lsls	r1, r0
    1af8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1afc:	f7ff bb8a 	b.w	1214 <schedule_transfer>
    1b00:	20000000 	.word	0x20000000

00001b04 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1b04:	6840      	ldr	r0, [r0, #4]
#endif
}
    1b06:	4770      	bx	lr

00001b08 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1b08:	4a12      	ldr	r2, [pc, #72]	; (1b54 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1b0a:	4b13      	ldr	r3, [pc, #76]	; (1b58 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1b0c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    1b10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    1b14:	4298      	cmp	r0, r3
{
    1b16:	b510      	push	{r4, lr}
    1b18:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    1b1a:	d202      	bcs.n	1b22 <usb_init_serialnumber+0x1a>
    1b1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1b20:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    1b22:	4c0e      	ldr	r4, [pc, #56]	; (1b5c <usb_init_serialnumber+0x54>)
    1b24:	a901      	add	r1, sp, #4
    1b26:	220a      	movs	r2, #10
    1b28:	f7ff f898 	bl	c5c <ultoa>
	for (i=0; i<10; i++) {
    1b2c:	a901      	add	r1, sp, #4
    1b2e:	2300      	movs	r3, #0
    1b30:	4620      	mov	r0, r4
		char c = buf[i];
    1b32:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    1b36:	3301      	adds	r3, #1
		if (!c) break;
    1b38:	b13a      	cbz	r2, 1b4a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    1b3a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    1b3c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    1b40:	d1f7      	bne.n	1b32 <usb_init_serialnumber+0x2a>
    1b42:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1b44:	7023      	strb	r3, [r4, #0]
}
    1b46:	b004      	add	sp, #16
    1b48:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1b4a:	005b      	lsls	r3, r3, #1
    1b4c:	b2db      	uxtb	r3, r3
    1b4e:	7023      	strb	r3, [r4, #0]
}
    1b50:	b004      	add	sp, #16
    1b52:	bd10      	pop	{r4, pc}
    1b54:	401f4400 	.word	0x401f4400
    1b58:	00989680 	.word	0x00989680
    1b5c:	20000820 	.word	0x20000820

00001b60 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    1b60:	f000 badc 	b.w	211c <usb_serial_flush_input>

00001b64 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    1b64:	f000 baac 	b.w	20c0 <usb_serial_peekchar>

00001b68 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    1b68:	f000 bb10 	b.w	218c <usb_serial_getchar>

00001b6c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    1b6c:	f000 baca 	b.w	2104 <usb_serial_available>

00001b70 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1b70:	f000 bb66 	b.w	2240 <usb_serial_flush_output>

00001b74 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1b74:	f000 bb3c 	b.w	21f0 <usb_serial_write_buffer_free>

00001b78 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b78:	4608      	mov	r0, r1
    1b7a:	4611      	mov	r1, r2
    1b7c:	f000 bb2c 	b.w	21d8 <usb_serial_write>

00001b80 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1b82:	4c14      	ldr	r4, [pc, #80]	; (1bd4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b84:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b88:	4e13      	ldr	r6, [pc, #76]	; (1bd8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1b8e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b92:	4f12      	ldr	r7, [pc, #72]	; (1bdc <rx_queue_transfer+0x5c>)
    1b94:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    1b98:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b9a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b9e:	4621      	mov	r1, r4
    1ba0:	883a      	ldrh	r2, [r7, #0]
    1ba2:	4630      	mov	r0, r6
    1ba4:	f7ff ff74 	bl	1a90 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    1ba8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    1baa:	4423      	add	r3, r4
	asm("dsb");
    1bac:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    1bb0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    1bb4:	3420      	adds	r4, #32
	} while (location < end_addr);
    1bb6:	42a3      	cmp	r3, r4
    1bb8:	d8fa      	bhi.n	1bb0 <rx_queue_transfer+0x30>
	asm("dsb");
    1bba:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1bbe:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1bc2:	2003      	movs	r0, #3
    1bc4:	4631      	mov	r1, r6
    1bc6:	f7ff ff8f 	bl	1ae8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1bce:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    1bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bd4:	20200080 	.word	0x20200080
    1bd8:	20000f00 	.word	0x20000f00
    1bdc:	20001234 	.word	0x20001234

00001be0 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1be0:	4b24      	ldr	r3, [pc, #144]	; (1c74 <rx_event+0x94>)
{
    1be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1be6:	881c      	ldrh	r4, [r3, #0]
    1be8:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    1bea:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1bec:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1bf0:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    1bf2:	2c00      	cmp	r4, #0
    1bf4:	dd24      	ble.n	1c40 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    1bf6:	4920      	ldr	r1, [pc, #128]	; (1c78 <rx_event+0x98>)
		if (head != rx_tail) {
    1bf8:	4820      	ldr	r0, [pc, #128]	; (1c7c <rx_event+0x9c>)
		uint32_t head = rx_head;
    1bfa:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    1bfc:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    1bfe:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    1c00:	4e1f      	ldr	r6, [pc, #124]	; (1c80 <rx_event+0xa0>)
		if (head != rx_tail) {
    1c02:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    1c04:	481f      	ldr	r0, [pc, #124]	; (1c84 <rx_event+0xa4>)
		if (head != rx_tail) {
    1c06:	d007      	beq.n	1c18 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    1c08:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1c0c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1c10:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1c14:	4294      	cmp	r4, r2
    1c16:	d918      	bls.n	1c4a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1c18:	3301      	adds	r3, #1
		rx_index[i] = 0;
    1c1a:	2200      	movs	r2, #0
		rx_count[i] = len;
    1c1c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    1c20:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    1c22:	4e19      	ldr	r6, [pc, #100]	; (1c88 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    1c24:	bf88      	it	hi
    1c26:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    1c28:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    1c2c:	bf98      	it	ls
    1c2e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    1c30:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    1c32:	4b16      	ldr	r3, [pc, #88]	; (1c8c <rx_event+0xac>)
		rx_head = head;
    1c34:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    1c36:	681a      	ldr	r2, [r3, #0]
    1c38:	4414      	add	r4, r2
    1c3a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    1c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    1c40:	4628      	mov	r0, r5
}
    1c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    1c46:	f7ff bf9b 	b.w	1b80 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1c4a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    1c4e:	4910      	ldr	r1, [pc, #64]	; (1c90 <rx_event+0xb0>)
    1c50:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    1c52:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1c54:	4408      	add	r0, r1
    1c56:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    1c5a:	f7fe ff65 	bl	b28 <memcpy>
				rx_available += len;
    1c5e:	4a0b      	ldr	r2, [pc, #44]	; (1c8c <rx_event+0xac>)
				rx_queue_transfer(i);
    1c60:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    1c62:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    1c66:	6813      	ldr	r3, [r2, #0]
    1c68:	4423      	add	r3, r4
}
    1c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    1c6e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    1c70:	f7ff bf86 	b.w	1b80 <rx_queue_transfer>
    1c74:	20001234 	.word	0x20001234
    1c78:	2000123e 	.word	0x2000123e
    1c7c:	2000123f 	.word	0x2000123f
    1c80:	200011d4 	.word	0x200011d4
    1c84:	200011f4 	.word	0x200011f4
    1c88:	200011e4 	.word	0x200011e4
    1c8c:	200011d0 	.word	0x200011d0
    1c90:	20200080 	.word	0x20200080

00001c94 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    1c94:	4b1d      	ldr	r3, [pc, #116]	; (1d0c <usb_serial_flush_callback+0x78>)
    1c96:	781a      	ldrb	r2, [r3, #0]
    1c98:	2a00      	cmp	r2, #0
    1c9a:	d136      	bne.n	1d0a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    1c9c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    1ca0:	4a1b      	ldr	r2, [pc, #108]	; (1d10 <usb_serial_flush_callback+0x7c>)
    1ca2:	7812      	ldrb	r2, [r2, #0]
    1ca4:	b38a      	cbz	r2, 1d0a <usb_serial_flush_callback+0x76>
{
    1ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    1caa:	4d1a      	ldr	r5, [pc, #104]	; (1d14 <usb_serial_flush_callback+0x80>)
    1cac:	882a      	ldrh	r2, [r5, #0]
    1cae:	b352      	cbz	r2, 1d06 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1cb0:	4e19      	ldr	r6, [pc, #100]	; (1d18 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1cb2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    1cb6:	4f19      	ldr	r7, [pc, #100]	; (1d1c <usb_serial_flush_callback+0x88>)
    1cb8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1cba:	4c19      	ldr	r4, [pc, #100]	; (1d20 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    1cbc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1cc0:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1cc4:	4642      	mov	r2, r8
    1cc6:	4638      	mov	r0, r7
    1cc8:	4621      	mov	r1, r4
    1cca:	f7ff fee1 	bl	1a90 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    1cce:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    1cd2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1cd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1cda:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    1cde:	3420      	adds	r4, #32
	} while (location < end_addr);
    1ce0:	42a2      	cmp	r2, r4
    1ce2:	d8fa      	bhi.n	1cda <usb_serial_flush_callback+0x46>
	asm("dsb");
    1ce4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1ce8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1cec:	2004      	movs	r0, #4
    1cee:	4639      	mov	r1, r7
    1cf0:	f7ff fee6 	bl	1ac0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1cf4:	7833      	ldrb	r3, [r6, #0]
    1cf6:	3301      	adds	r3, #1
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	2b03      	cmp	r3, #3
    1cfc:	bf88      	it	hi
    1cfe:	2300      	movhi	r3, #0
    1d00:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1d02:	2300      	movs	r3, #0
    1d04:	802b      	strh	r3, [r5, #0]
}
    1d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d0a:	4770      	bx	lr
    1d0c:	20001243 	.word	0x20001243
    1d10:	20001245 	.word	0x20001245
    1d14:	20001236 	.word	0x20001236
    1d18:	20001242 	.word	0x20001242
    1d1c:	20001000 	.word	0x20001000
    1d20:	20201080 	.word	0x20201080

00001d24 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    1d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d28:	b085      	sub	sp, #20
	while (size > 0) {
    1d2a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    1d2e:	2900      	cmp	r1, #0
    1d30:	f000 80bf 	beq.w	1eb2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    1d34:	2300      	movs	r3, #0
    1d36:	4c60      	ldr	r4, [pc, #384]	; (1eb8 <usb_serial_write.part.0+0x194>)
    1d38:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1ed4 <usb_serial_write.part.0+0x1b0>
    1d3c:	f8df a198 	ldr.w	sl, [pc, #408]	; 1ed8 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    1d40:	4f5e      	ldr	r7, [pc, #376]	; (1ebc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    1d42:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    1d44:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    1d46:	4a5e      	ldr	r2, [pc, #376]	; (1ec0 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    1d48:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    1d4a:	4b5e      	ldr	r3, [pc, #376]	; (1ec4 <usb_serial_write.part.0+0x1a0>)
    1d4c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    1d4e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    1d52:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    1d56:	2b00      	cmp	r3, #0
    1d58:	f040 80a7 	bne.w	1eaa <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    1d5c:	461e      	mov	r6, r3
		int waiting=0;
    1d5e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    1d60:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    1d62:	4648      	mov	r0, r9
    1d64:	f7ff fece 	bl	1b04 <usb_transfer_status>
			if (!(status & 0x80)) {
    1d68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    1d6c:	f000 808c 	beq.w	1e88 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    1d70:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    1d74:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    1d78:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    1d7c:	b905      	cbnz	r5, 1d80 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    1d7e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    1d80:	2b00      	cmp	r3, #0
    1d82:	d17d      	bne.n	1e80 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1d84:	683b      	ldr	r3, [r7, #0]
    1d86:	1b9b      	subs	r3, r3, r6
    1d88:	2b78      	cmp	r3, #120	; 0x78
    1d8a:	f200 8087 	bhi.w	1e9c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    1d8e:	4b4e      	ldr	r3, [pc, #312]	; (1ec8 <usb_serial_write.part.0+0x1a4>)
    1d90:	781b      	ldrb	r3, [r3, #0]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d074      	beq.n	1e80 <usb_serial_write.part.0+0x15c>
			yield();
    1d96:	f000 fa9d 	bl	22d4 <yield>
			tx_noautoflush = 1;
    1d9a:	2201      	movs	r2, #1
		while (!tx_available) {
    1d9c:	f8b8 3000 	ldrh.w	r3, [r8]
    1da0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    1da2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    1da4:	2b00      	cmp	r3, #0
    1da6:	d0dc      	beq.n	1d62 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1da8:	4a46      	ldr	r2, [pc, #280]	; (1ec4 <usb_serial_write.part.0+0x1a0>)
    1daa:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1dae:	7811      	ldrb	r1, [r2, #0]
    1db0:	461a      	mov	r2, r3
    1db2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    1db6:	4d45      	ldr	r5, [pc, #276]	; (1ecc <usb_serial_write.part.0+0x1a8>)
    1db8:	02c9      	lsls	r1, r1, #11
    1dba:	4428      	add	r0, r5
		if (size >= tx_available) {
    1dbc:	9d01      	ldr	r5, [sp, #4]
    1dbe:	4295      	cmp	r5, r2
    1dc0:	d217      	bcs.n	1df2 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    1dc2:	9303      	str	r3, [sp, #12]
    1dc4:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    1dc8:	462a      	mov	r2, r5
    1dca:	f7fe fead 	bl	b28 <memcpy>
			tx_available -= size;
    1dce:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1dd0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    1dd4:	1b5b      	subs	r3, r3, r5
    1dd6:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1dda:	4b3d      	ldr	r3, [pc, #244]	; (1ed0 <usb_serial_write.part.0+0x1ac>)
    1ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    1de0:	f3bf 8f4f 	dsb	sy
			sent += size;
    1de4:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    1de6:	2300      	movs	r3, #0
			sent += size;
    1de8:	4428      	add	r0, r5
		tx_noautoflush = 0;
    1dea:	7023      	strb	r3, [r4, #0]
}
    1dec:	b005      	add	sp, #20
    1dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1df2:	4b36      	ldr	r3, [pc, #216]	; (1ecc <usb_serial_write.part.0+0x1a8>)
    1df4:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    1df6:	9902      	ldr	r1, [sp, #8]
    1df8:	f7fe fe96 	bl	b28 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    1dfc:	2300      	movs	r3, #0
    1dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1e02:	4629      	mov	r1, r5
    1e04:	4648      	mov	r0, r9
    1e06:	f7ff fe43 	bl	1a90 <usb_prepare_transfer>
	asm("dsb");
    1e0a:	f3bf 8f4f 	dsb	sy
    1e0e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    1e12:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    1e16:	4293      	cmp	r3, r2
    1e18:	bf34      	ite	cc
    1e1a:	2301      	movcc	r3, #1
    1e1c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    1e1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1e22:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    1e26:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    1e2a:	3520      	adds	r5, #32
	} while (location < end_addr);
    1e2c:	42ab      	cmp	r3, r5
    1e2e:	d1fa      	bne.n	1e26 <usb_serial_write.part.0+0x102>
	asm("dsb");
    1e30:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1e34:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1e38:	2004      	movs	r0, #4
    1e3a:	4649      	mov	r1, r9
    1e3c:	f7ff fe40 	bl	1ac0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1e40:	4a20      	ldr	r2, [pc, #128]	; (1ec4 <usb_serial_write.part.0+0x1a0>)
    1e42:	7813      	ldrb	r3, [r2, #0]
    1e44:	3301      	adds	r3, #1
    1e46:	b2db      	uxtb	r3, r3
    1e48:	2b03      	cmp	r3, #3
    1e4a:	bf84      	itt	hi
    1e4c:	2300      	movhi	r3, #0
    1e4e:	4a1d      	ldrhi	r2, [pc, #116]	; (1ec4 <usb_serial_write.part.0+0x1a0>)
    1e50:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    1e52:	f8b8 3000 	ldrh.w	r3, [r8]
    1e56:	9a01      	ldr	r2, [sp, #4]
    1e58:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    1e5a:	9a00      	ldr	r2, [sp, #0]
    1e5c:	441a      	add	r2, r3
			size -= tx_available;
    1e5e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    1e60:	9200      	str	r2, [sp, #0]
			data += tx_available;
    1e62:	9a02      	ldr	r2, [sp, #8]
    1e64:	441a      	add	r2, r3
			tx_available = 0;
    1e66:	2300      	movs	r3, #0
			data += tx_available;
    1e68:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    1e6a:	4a19      	ldr	r2, [pc, #100]	; (1ed0 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    1e6c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    1e70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    1e74:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    1e78:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    1e7a:	2900      	cmp	r1, #0
    1e7c:	f47f af62 	bne.w	1d44 <usb_serial_write.part.0+0x20>
	return sent;
    1e80:	9800      	ldr	r0, [sp, #0]
}
    1e82:	b005      	add	sp, #20
    1e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    1e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1e8c:	4b0d      	ldr	r3, [pc, #52]	; (1ec4 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    1e8e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1e92:	7819      	ldrb	r1, [r3, #0]
				break;
    1e94:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    1e96:	f8a8 2000 	strh.w	r2, [r8]
				break;
    1e9a:	e78a      	b.n	1db2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    1e9c:	2301      	movs	r3, #1
				return sent;
    1e9e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    1ea0:	f88a 3000 	strb.w	r3, [sl]
}
    1ea4:	b005      	add	sp, #20
    1ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1eaa:	461a      	mov	r2, r3
    1eac:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1eb0:	e77f      	b.n	1db2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    1eb2:	9801      	ldr	r0, [sp, #4]
	return sent;
    1eb4:	e7e5      	b.n	1e82 <usb_serial_write.part.0+0x15e>
    1eb6:	bf00      	nop
    1eb8:	20001243 	.word	0x20001243
    1ebc:	20001218 	.word	0x20001218
    1ec0:	20001000 	.word	0x20001000
    1ec4:	20001242 	.word	0x20001242
    1ec8:	20001245 	.word	0x20001245
    1ecc:	20201080 	.word	0x20201080
    1ed0:	402e0000 	.word	0x402e0000
    1ed4:	20001236 	.word	0x20001236
    1ed8:	20001241 	.word	0x20001241

00001edc <usb_serial_reset>:
}
    1edc:	4770      	bx	lr
    1ede:	bf00      	nop

00001ee0 <usb_serial_configure>:
	if (usb_high_speed) {
    1ee0:	4b2d      	ldr	r3, [pc, #180]	; (1f98 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1ee2:	2100      	movs	r1, #0
    1ee4:	2280      	movs	r2, #128	; 0x80
    1ee6:	482d      	ldr	r0, [pc, #180]	; (1f9c <usb_serial_configure+0xbc>)
{
    1ee8:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    1eea:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    1eec:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    1eee:	4d2c      	ldr	r5, [pc, #176]	; (1fa0 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    1ef0:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    1ef2:	4e2c      	ldr	r6, [pc, #176]	; (1fa4 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    1ef4:	bf0c      	ite	eq
    1ef6:	2340      	moveq	r3, #64	; 0x40
    1ef8:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    1efc:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1efe:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1f00:	f000 fc8e 	bl	2820 <memset>
	tx_head = 0;
    1f04:	4a28      	ldr	r2, [pc, #160]	; (1fa8 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f06:	4621      	mov	r1, r4
	tx_available = 0;
    1f08:	4b28      	ldr	r3, [pc, #160]	; (1fac <usb_serial_configure+0xcc>)
	tx_head = 0;
    1f0a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1f10:	4827      	ldr	r0, [pc, #156]	; (1fb0 <usb_serial_configure+0xd0>)
	tx_available = 0;
    1f12:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f14:	f000 fc84 	bl	2820 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1f18:	4a26      	ldr	r2, [pc, #152]	; (1fb4 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f1a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    1f1c:	4b26      	ldr	r3, [pc, #152]	; (1fb8 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f1e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    1f20:	e9c2 4400 	strd	r4, r4, [r2]
    1f24:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    1f28:	4a24      	ldr	r2, [pc, #144]	; (1fbc <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    1f2a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    1f2e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    1f30:	4a23      	ldr	r2, [pc, #140]	; (1fc0 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    1f32:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    1f36:	4b23      	ldr	r3, [pc, #140]	; (1fc4 <usb_serial_configure+0xe4>)
    1f38:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f3a:	4623      	mov	r3, r4
	rx_available = 0;
    1f3c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f3e:	4622      	mov	r2, r4
    1f40:	f7ff fd74 	bl	1a2c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1f44:	4622      	mov	r2, r4
    1f46:	8831      	ldrh	r1, [r6, #0]
    1f48:	2003      	movs	r0, #3
    1f4a:	4b1f      	ldr	r3, [pc, #124]	; (1fc8 <usb_serial_configure+0xe8>)
    1f4c:	f7ff fd3c 	bl	19c8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1f50:	4623      	mov	r3, r4
    1f52:	2201      	movs	r2, #1
    1f54:	8829      	ldrh	r1, [r5, #0]
    1f56:	2004      	movs	r0, #4
    1f58:	f7ff fd68 	bl	1a2c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1f5c:	4620      	mov	r0, r4
    1f5e:	3401      	adds	r4, #1
    1f60:	f7ff fe0e 	bl	1b80 <rx_queue_transfer>
    1f64:	2c08      	cmp	r4, #8
    1f66:	d1f9      	bne.n	1f5c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    1f68:	4b18      	ldr	r3, [pc, #96]	; (1fcc <usb_serial_configure+0xec>)
    1f6a:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    1f6c:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    1f6e:	4818      	ldr	r0, [pc, #96]	; (1fd0 <usb_serial_configure+0xf0>)
    1f70:	4c18      	ldr	r4, [pc, #96]	; (1fd4 <usb_serial_configure+0xf4>)
    1f72:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1f74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1f7c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1f80:	4915      	ldr	r1, [pc, #84]	; (1fd8 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1f82:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1f86:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1f8a:	b121      	cbz	r1, 1f96 <usb_serial_configure+0xb6>
    1f8c:	4a13      	ldr	r2, [pc, #76]	; (1fdc <usb_serial_configure+0xfc>)
    1f8e:	7813      	ldrb	r3, [r2, #0]
    1f90:	f043 0301 	orr.w	r3, r3, #1
    1f94:	7013      	strb	r3, [r2, #0]
}
    1f96:	bd70      	pop	{r4, r5, r6, pc}
    1f98:	20001246 	.word	0x20001246
    1f9c:	20001000 	.word	0x20001000
    1fa0:	20001238 	.word	0x20001238
    1fa4:	20001234 	.word	0x20001234
    1fa8:	20001242 	.word	0x20001242
    1fac:	20001236 	.word	0x20001236
    1fb0:	20000f00 	.word	0x20000f00
    1fb4:	200011d4 	.word	0x200011d4
    1fb8:	200011e4 	.word	0x200011e4
    1fbc:	2000123e 	.word	0x2000123e
    1fc0:	200011d0 	.word	0x200011d0
    1fc4:	2000123f 	.word	0x2000123f
    1fc8:	00001be1 	.word	0x00001be1
    1fcc:	402e0000 	.word	0x402e0000
    1fd0:	2000122c 	.word	0x2000122c
    1fd4:	00001c95 	.word	0x00001c95
    1fd8:	00000000 	.word	0x00000000
    1fdc:	20001248 	.word	0x20001248

00001fe0 <usb_serial_read>:
{
    1fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1fe4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1fe8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    1fec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 20b8 <usb_serial_read+0xd8>
{
    1ff0:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1ff2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    1ff6:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    1ff8:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    1ffc:	2900      	cmp	r1, #0
    1ffe:	d04f      	beq.n	20a0 <usb_serial_read+0xc0>
    2000:	4680      	mov	r8, r0
    2002:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    2004:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    2006:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 20bc <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    200a:	4b26      	ldr	r3, [pc, #152]	; (20a4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    200c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2010:	4925      	ldr	r1, [pc, #148]	; (20a8 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    2012:	781b      	ldrb	r3, [r3, #0]
    2014:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    2016:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    201a:	d03f      	beq.n	209c <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    201c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    201e:	4b23      	ldr	r3, [pc, #140]	; (20ac <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2020:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    2022:	bf28      	it	cs
    2024:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2026:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    2028:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    202c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    2030:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    2032:	4b1f      	ldr	r3, [pc, #124]	; (20b0 <usb_serial_read+0xd0>)
    2034:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    2038:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    203c:	42aa      	cmp	r2, r5
    203e:	d21c      	bcs.n	207a <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2040:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    2044:	4918      	ldr	r1, [pc, #96]	; (20a8 <usb_serial_read+0xc8>)
			rx_available -= len;
    2046:	4c1b      	ldr	r4, [pc, #108]	; (20b4 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2048:	4461      	add	r1, ip
    204a:	9201      	str	r2, [sp, #4]
    204c:	f7fe fd6c 	bl	b28 <memcpy>
			rx_available -= len;
    2050:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    2052:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    2056:	4658      	mov	r0, fp
			rx_index[i] += len;
    2058:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    205a:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    205e:	442a      	add	r2, r5
			rx_available -= len;
    2060:	4439      	add	r1, r7
			rx_index[i] += len;
    2062:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    2066:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2068:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    206c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2070:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    2074:	b003      	add	sp, #12
    2076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    207a:	462a      	mov	r2, r5
			count += avail;
    207c:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    207e:	f7fe fd53 	bl	b28 <memcpy>
			rx_available -= avail;
    2082:	490c      	ldr	r1, [pc, #48]	; (20b4 <usb_serial_read+0xd4>)
			rx_tail = tail;
    2084:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    2086:	4630      	mov	r0, r6
			rx_available -= avail;
    2088:	680a      	ldr	r2, [r1, #0]
			p += avail;
    208a:	44a8      	add	r8, r5
			rx_available -= avail;
    208c:	1b52      	subs	r2, r2, r5
    208e:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    2090:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    2094:	f7ff fd74 	bl	1b80 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    2098:	45bb      	cmp	fp, r7
    209a:	d8b6      	bhi.n	200a <usb_serial_read+0x2a>
	return count;
    209c:	4638      	mov	r0, r7
    209e:	e7e3      	b.n	2068 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    20a0:	4608      	mov	r0, r1
    20a2:	e7e1      	b.n	2068 <usb_serial_read+0x88>
    20a4:	2000123e 	.word	0x2000123e
    20a8:	20200080 	.word	0x20200080
    20ac:	200011f4 	.word	0x200011f4
    20b0:	200011d4 	.word	0x200011d4
    20b4:	200011d0 	.word	0x200011d0
    20b8:	2000123f 	.word	0x2000123f
    20bc:	200011e4 	.word	0x200011e4

000020c0 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    20c0:	4b0b      	ldr	r3, [pc, #44]	; (20f0 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    20c2:	4a0c      	ldr	r2, [pc, #48]	; (20f4 <usb_serial_peekchar+0x34>)
    20c4:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    20c6:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    20c8:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    20ca:	428a      	cmp	r2, r1
    20cc:	d00d      	beq.n	20ea <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    20ce:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    20d0:	4809      	ldr	r0, [pc, #36]	; (20f8 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    20d2:	4a0a      	ldr	r2, [pc, #40]	; (20fc <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    20d4:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    20d6:	490a      	ldr	r1, [pc, #40]	; (2100 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    20d8:	bf28      	it	cs
    20da:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    20dc:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    20de:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    20e2:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    20e6:	5c58      	ldrb	r0, [r3, r1]
    20e8:	4770      	bx	lr
	if (tail == rx_head) return -1;
    20ea:	f04f 30ff 	mov.w	r0, #4294967295
}
    20ee:	4770      	bx	lr
    20f0:	2000123e 	.word	0x2000123e
    20f4:	2000123f 	.word	0x2000123f
    20f8:	200011f4 	.word	0x200011f4
    20fc:	20200080 	.word	0x20200080
    2100:	200011e4 	.word	0x200011e4

00002104 <usb_serial_available>:
	uint32_t n = rx_available;
    2104:	4b04      	ldr	r3, [pc, #16]	; (2118 <usb_serial_available+0x14>)
{
    2106:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    2108:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    210a:	b10c      	cbz	r4, 2110 <usb_serial_available+0xc>
}
    210c:	4620      	mov	r0, r4
    210e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    2110:	f000 f8e0 	bl	22d4 <yield>
}
    2114:	4620      	mov	r0, r4
    2116:	bd10      	pop	{r4, pc}
    2118:	200011d0 	.word	0x200011d0

0000211c <usb_serial_flush_input>:
{
    211c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2120:	4e14      	ldr	r6, [pc, #80]	; (2174 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    2122:	4d15      	ldr	r5, [pc, #84]	; (2178 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    2124:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    2126:	782a      	ldrb	r2, [r5, #0]
    2128:	4293      	cmp	r3, r2
    212a:	d021      	beq.n	2170 <usb_serial_flush_input+0x54>
    212c:	b2dc      	uxtb	r4, r3
    212e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2180 <usb_serial_flush_input+0x64>
    2132:	f8df b050 	ldr.w	fp, [pc, #80]	; 2184 <usb_serial_flush_input+0x68>
    2136:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2188 <usb_serial_flush_input+0x6c>
    213a:	4f10      	ldr	r7, [pc, #64]	; (217c <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    213c:	3401      	adds	r4, #1
    213e:	2c08      	cmp	r4, #8
		rx_tail = tail;
    2140:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    2144:	d901      	bls.n	214a <usb_serial_flush_input+0x2e>
    2146:	2400      	movs	r4, #0
    2148:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    214a:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    214e:	f8db 3000 	ldr.w	r3, [fp]
    2152:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    2156:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    215a:	1a52      	subs	r2, r2, r1
    215c:	1a9b      	subs	r3, r3, r2
    215e:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2162:	f7ff fd0d 	bl	1b80 <rx_queue_transfer>
		rx_tail = tail;
    2166:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    216a:	782b      	ldrb	r3, [r5, #0]
    216c:	42a3      	cmp	r3, r4
    216e:	d1e5      	bne.n	213c <usb_serial_flush_input+0x20>
}
    2170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2174:	2000123f 	.word	0x2000123f
    2178:	2000123e 	.word	0x2000123e
    217c:	200011e4 	.word	0x200011e4
    2180:	200011f4 	.word	0x200011f4
    2184:	200011d0 	.word	0x200011d0
    2188:	200011d4 	.word	0x200011d4

0000218c <usb_serial_getchar>:
{
    218c:	b500      	push	{lr}
    218e:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    2190:	2101      	movs	r1, #1
    2192:	f10d 0007 	add.w	r0, sp, #7
    2196:	f7ff ff23 	bl	1fe0 <usb_serial_read>
    219a:	b120      	cbz	r0, 21a6 <usb_serial_getchar+0x1a>
    219c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    21a0:	b003      	add	sp, #12
    21a2:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    21a6:	f04f 30ff 	mov.w	r0, #4294967295
    21aa:	e7f9      	b.n	21a0 <usb_serial_getchar+0x14>

000021ac <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    21ac:	4b09      	ldr	r3, [pc, #36]	; (21d4 <usb_serial_putchar+0x28>)
{
    21ae:	b500      	push	{lr}
    21b0:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    21b2:	781b      	ldrb	r3, [r3, #0]
{
    21b4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    21b8:	b13b      	cbz	r3, 21ca <usb_serial_putchar+0x1e>
    21ba:	2101      	movs	r1, #1
    21bc:	f10d 0007 	add.w	r0, sp, #7
    21c0:	f7ff fdb0 	bl	1d24 <usb_serial_write.part.0>
}
    21c4:	b003      	add	sp, #12
    21c6:	f85d fb04 	ldr.w	pc, [sp], #4
    21ca:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    21ce:	b003      	add	sp, #12
    21d0:	f85d fb04 	ldr.w	pc, [sp], #4
    21d4:	20001245 	.word	0x20001245

000021d8 <usb_serial_write>:
	if (!usb_configuration) return 0;
    21d8:	4b04      	ldr	r3, [pc, #16]	; (21ec <usb_serial_write+0x14>)
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    21e0:	b10b      	cbz	r3, 21e6 <usb_serial_write+0xe>
    21e2:	f7ff bd9f 	b.w	1d24 <usb_serial_write.part.0>
}
    21e6:	4610      	mov	r0, r2
    21e8:	4770      	bx	lr
    21ea:	bf00      	nop
    21ec:	20001245 	.word	0x20001245

000021f0 <usb_serial_write_buffer_free>:
{
    21f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    21f4:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    21f6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 223c <usb_serial_write_buffer_free+0x4c>
    21fa:	2301      	movs	r3, #1
    21fc:	4d0d      	ldr	r5, [pc, #52]	; (2234 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    21fe:	4627      	mov	r7, r4
    2200:	4e0d      	ldr	r6, [pc, #52]	; (2238 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    2202:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    2206:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2208:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    220a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    220c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    220e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2212:	d005      	beq.n	2220 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2214:	f7ff fc76 	bl	1b04 <usb_transfer_status>
    2218:	0603      	lsls	r3, r0, #24
    221a:	bf58      	it	pl
    221c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    2220:	2c04      	cmp	r4, #4
    2222:	d1f0      	bne.n	2206 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    2224:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2228:	2300      	movs	r3, #0
}
    222a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    222c:	f888 3000 	strb.w	r3, [r8]
}
    2230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2234:	20001000 	.word	0x20001000
    2238:	20001242 	.word	0x20001242
    223c:	20001243 	.word	0x20001243

00002240 <usb_serial_flush_output>:
{
    2240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    2244:	4b1d      	ldr	r3, [pc, #116]	; (22bc <usb_serial_flush_output+0x7c>)
    2246:	781b      	ldrb	r3, [r3, #0]
    2248:	b113      	cbz	r3, 2250 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    224a:	4d1d      	ldr	r5, [pc, #116]	; (22c0 <usb_serial_flush_output+0x80>)
    224c:	882a      	ldrh	r2, [r5, #0]
    224e:	b90a      	cbnz	r2, 2254 <usb_serial_flush_output+0x14>
}
    2250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    2254:	4e1b      	ldr	r6, [pc, #108]	; (22c4 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    2256:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    225a:	491b      	ldr	r1, [pc, #108]	; (22c8 <usb_serial_flush_output+0x88>)
    225c:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    225e:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2260:	4c1a      	ldr	r4, [pc, #104]	; (22cc <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2262:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    2266:	4f1a      	ldr	r7, [pc, #104]	; (22d0 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2268:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    226c:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    226e:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    2270:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2272:	4621      	mov	r1, r4
    2274:	2300      	movs	r3, #0
    2276:	f7ff fc0b 	bl	1a90 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    227a:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    227e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2282:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2286:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    228a:	3420      	adds	r4, #32
	} while (location < end_addr);
    228c:	42a2      	cmp	r2, r4
    228e:	d8fa      	bhi.n	2286 <usb_serial_flush_output+0x46>
	asm("dsb");
    2290:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2294:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2298:	2004      	movs	r0, #4
    229a:	4641      	mov	r1, r8
    229c:	f7ff fc10 	bl	1ac0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    22a0:	7833      	ldrb	r3, [r6, #0]
    22a2:	3301      	adds	r3, #1
    22a4:	b2db      	uxtb	r3, r3
    22a6:	2b03      	cmp	r3, #3
    22a8:	bf88      	it	hi
    22aa:	2300      	movhi	r3, #0
    22ac:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    22ae:	2300      	movs	r3, #0
    22b0:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    22b2:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    22b6:	703b      	strb	r3, [r7, #0]
}
    22b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    22bc:	20001245 	.word	0x20001245
    22c0:	20001236 	.word	0x20001236
    22c4:	20001242 	.word	0x20001242
    22c8:	20001000 	.word	0x20001000
    22cc:	20201080 	.word	0x20201080
    22d0:	20001243 	.word	0x20001243

000022d4 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    22d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    22d8:	4b2d      	ldr	r3, [pc, #180]	; (2390 <yield+0xbc>)
    22da:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    22dc:	b166      	cbz	r6, 22f8 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    22de:	4f2d      	ldr	r7, [pc, #180]	; (2394 <yield+0xc0>)
    22e0:	783b      	ldrb	r3, [r7, #0]
    22e2:	b94b      	cbnz	r3, 22f8 <yield+0x24>
	running = 1;
    22e4:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    22e6:	07f1      	lsls	r1, r6, #31
	running = 1;
    22e8:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    22ea:	d443      	bmi.n	2374 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    22ec:	07b2      	lsls	r2, r6, #30
    22ee:	d426      	bmi.n	233e <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    22f0:	2300      	movs	r3, #0
    22f2:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    22f4:	0773      	lsls	r3, r6, #29
    22f6:	d401      	bmi.n	22fc <yield+0x28>
		EventResponder::runFromYield();
	}
};
    22f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    22fc:	4b26      	ldr	r3, [pc, #152]	; (2398 <yield+0xc4>)
    22fe:	681a      	ldr	r2, [r3, #0]
    2300:	2a00      	cmp	r2, #0
    2302:	d0f9      	beq.n	22f8 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2304:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2308:	2a00      	cmp	r2, #0
    230a:	d1f5      	bne.n	22f8 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    230c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    2310:	b672      	cpsid	i
		EventResponder *first = firstYield;
    2312:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2314:	2800      	cmp	r0, #0
    2316:	d034      	beq.n	2382 <yield+0xae>
		if (runningFromYield) {
    2318:	4c20      	ldr	r4, [pc, #128]	; (239c <yield+0xc8>)
    231a:	7821      	ldrb	r1, [r4, #0]
    231c:	2900      	cmp	r1, #0
    231e:	d130      	bne.n	2382 <yield+0xae>
		runningFromYield = true;
    2320:	2201      	movs	r2, #1
    2322:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    2324:	6942      	ldr	r2, [r0, #20]
    2326:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    2328:	2a00      	cmp	r2, #0
    232a:	d02e      	beq.n	238a <yield+0xb6>
			firstYield->_prev = nullptr;
    232c:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    232e:	b905      	cbnz	r5, 2332 <yield+0x5e>
    2330:	b662      	cpsie	i
		first->_triggered = false;
    2332:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2334:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    2336:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2338:	4798      	blx	r3
		runningFromYield = false;
    233a:	7025      	strb	r5, [r4, #0]
    233c:	e7dc      	b.n	22f8 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    233e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 23a4 <yield+0xd0>
    2342:	f898 3000 	ldrb.w	r3, [r8]
    2346:	2b00      	cmp	r3, #0
    2348:	d0d2      	beq.n	22f0 <yield+0x1c>
    234a:	2500      	movs	r5, #0
    234c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 23a8 <yield+0xd4>
    2350:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    2352:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2356:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2358:	6823      	ldr	r3, [r4, #0]
    235a:	4620      	mov	r0, r4
    235c:	691b      	ldr	r3, [r3, #16]
    235e:	4798      	blx	r3
    2360:	b110      	cbz	r0, 2368 <yield+0x94>
    2362:	6963      	ldr	r3, [r4, #20]
    2364:	689b      	ldr	r3, [r3, #8]
    2366:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2368:	f898 2000 	ldrb.w	r2, [r8]
    236c:	b2eb      	uxtb	r3, r5
    236e:	429a      	cmp	r2, r3
    2370:	d8ef      	bhi.n	2352 <yield+0x7e>
    2372:	e7bd      	b.n	22f0 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2374:	f7ff fec6 	bl	2104 <usb_serial_available>
		if (Serial.available()) serialEvent();
    2378:	2800      	cmp	r0, #0
    237a:	d0b7      	beq.n	22ec <yield+0x18>
    237c:	f3af 8000 	nop.w
    2380:	e7b4      	b.n	22ec <yield+0x18>
		if (doit) __enable_irq();
    2382:	2d00      	cmp	r5, #0
    2384:	d1b8      	bne.n	22f8 <yield+0x24>
    2386:	b662      	cpsie	i
    2388:	e7b6      	b.n	22f8 <yield+0x24>
			lastYield = nullptr;
    238a:	4b05      	ldr	r3, [pc, #20]	; (23a0 <yield+0xcc>)
    238c:	601a      	str	r2, [r3, #0]
    238e:	e7ce      	b.n	232e <yield+0x5a>
    2390:	20001248 	.word	0x20001248
    2394:	2000123c 	.word	0x2000123c
    2398:	2000114c 	.word	0x2000114c
    239c:	2000123a 	.word	0x2000123a
    23a0:	20001158 	.word	0x20001158
    23a4:	2000123b 	.word	0x2000123b
    23a8:	20001184 	.word	0x20001184

000023ac <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    23ac:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    23ae:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    23b2:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    23b4:	4c0c      	ldr	r4, [pc, #48]	; (23e8 <EventResponder::runFromInterrupt()+0x3c>)
    23b6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    23b8:	b180      	cbz	r0, 23dc <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    23ba:	4e0c      	ldr	r6, [pc, #48]	; (23ec <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    23bc:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    23be:	6943      	ldr	r3, [r0, #20]
    23c0:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    23c2:	b173      	cbz	r3, 23e2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    23c4:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    23c6:	b902      	cbnz	r2, 23ca <EventResponder::runFromInterrupt()+0x1e>
    23c8:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    23ca:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    23cc:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    23ce:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    23d0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    23d4:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    23d6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    23d8:	2800      	cmp	r0, #0
    23da:	d1f0      	bne.n	23be <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    23dc:	b902      	cbnz	r2, 23e0 <EventResponder::runFromInterrupt()+0x34>
    23de:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    23e0:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    23e2:	6033      	str	r3, [r6, #0]
    23e4:	e7ef      	b.n	23c6 <EventResponder::runFromInterrupt()+0x1a>
    23e6:	bf00      	nop
    23e8:	20001154 	.word	0x20001154
    23ec:	20001150 	.word	0x20001150

000023f0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    23f0:	f7ff bfdc 	b.w	23ac <EventResponder::runFromInterrupt()>

000023f4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    23f4:	4904      	ldr	r1, [pc, #16]	; (2408 <systick_isr+0x14>)
	systick_millis_count++;
    23f6:	4a05      	ldr	r2, [pc, #20]	; (240c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    23f8:	6849      	ldr	r1, [r1, #4]
    23fa:	4b05      	ldr	r3, [pc, #20]	; (2410 <systick_isr+0x1c>)
    23fc:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    23fe:	6813      	ldr	r3, [r2, #0]
    2400:	3301      	adds	r3, #1
    2402:	6013      	str	r3, [r2, #0]
}
    2404:	4770      	bx	lr
    2406:	bf00      	nop
    2408:	e0001000 	.word	0xe0001000
    240c:	20001218 	.word	0x20001218
    2410:	20001214 	.word	0x20001214

00002414 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2414:	49a2      	ldr	r1, [pc, #648]	; (26a0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2416:	4ba3      	ldr	r3, [pc, #652]	; (26a4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2418:	4288      	cmp	r0, r1
{
    241a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    241e:	4ca2      	ldr	r4, [pc, #648]	; (26a8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2420:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2422:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2424:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2428:	d91b      	bls.n	2462 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    242a:	4ba0      	ldr	r3, [pc, #640]	; (26ac <set_arm_clock+0x298>)
    242c:	4298      	cmp	r0, r3
    242e:	f240 8102 	bls.w	2636 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2432:	1ac3      	subs	r3, r0, r3
    2434:	499e      	ldr	r1, [pc, #632]	; (26b0 <set_arm_clock+0x29c>)
    2436:	0a1b      	lsrs	r3, r3, #8
    2438:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    243c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2440:	09db      	lsrs	r3, r3, #7
    2442:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2446:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    244a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    244e:	428b      	cmp	r3, r1
    2450:	bf28      	it	cs
    2452:	460b      	movcs	r3, r1
    2454:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    2458:	4b96      	ldr	r3, [pc, #600]	; (26b4 <set_arm_clock+0x2a0>)
    245a:	fba3 3707 	umull	r3, r7, r3, r7
    245e:	08ff      	lsrs	r7, r7, #3
    2460:	e004      	b.n	246c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    2462:	4f95      	ldr	r7, [pc, #596]	; (26b8 <set_arm_clock+0x2a4>)
    2464:	42b8      	cmp	r0, r7
    2466:	bf8c      	ite	hi
    2468:	270e      	movhi	r7, #14
    246a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    246c:	498d      	ldr	r1, [pc, #564]	; (26a4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    246e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2472:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2476:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    247c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2480:	d20c      	bcs.n	249c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2482:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2486:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    248a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    248e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2492:	680b      	ldr	r3, [r1, #0]
    2494:	2b00      	cmp	r3, #0
    2496:	dafc      	bge.n	2492 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2498:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    249c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    24a0:	d124      	bne.n	24ec <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    24a2:	4986      	ldr	r1, [pc, #536]	; (26bc <set_arm_clock+0x2a8>)
    24a4:	690c      	ldr	r4, [r1, #16]
    24a6:	4986      	ldr	r1, [pc, #536]	; (26c0 <set_arm_clock+0x2ac>)
    24a8:	43a1      	bics	r1, r4
    24aa:	f000 80ea 	beq.w	2682 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    24ae:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    24b2:	4634      	mov	r4, r6
    24b4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    24b8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    24bc:	d004      	beq.n	24c8 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    24be:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    24c2:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    24c4:	4b77      	ldr	r3, [pc, #476]	; (26a4 <set_arm_clock+0x290>)
    24c6:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    24c8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    24cc:	d007      	beq.n	24de <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    24ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    24d2:	4974      	ldr	r1, [pc, #464]	; (26a4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    24d4:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    24d6:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    24d8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    24da:	071a      	lsls	r2, r3, #28
    24dc:	d4fc      	bmi.n	24d8 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    24de:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    24e2:	4a70      	ldr	r2, [pc, #448]	; (26a4 <set_arm_clock+0x290>)
    24e4:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    24e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    24e8:	069b      	lsls	r3, r3, #26
    24ea:	d4fc      	bmi.n	24e6 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    24ec:	4c75      	ldr	r4, [pc, #468]	; (26c4 <set_arm_clock+0x2b0>)
    24ee:	42a0      	cmp	r0, r4
    24f0:	f200 80ce 	bhi.w	2690 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    24f4:	f04f 0c01 	mov.w	ip, #1
    24f8:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    24fa:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    24fc:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    2500:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    2504:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2508:	42a2      	cmp	r2, r4
    250a:	d818      	bhi.n	253e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    250c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    2510:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2514:	f040 808d 	bne.w	2632 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    2518:	f1bc 0f04 	cmp.w	ip, #4
    251c:	f200 8091 	bhi.w	2642 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    2520:	180a      	adds	r2, r1, r0
    2522:	42a2      	cmp	r2, r4
    2524:	f200 80a4 	bhi.w	2670 <set_arm_clock+0x25c>
    2528:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    252c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    252e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2532:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    2536:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    253a:	42a2      	cmp	r2, r4
    253c:	d9e6      	bls.n	250c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    253e:	f10c 31ff 	add.w	r1, ip, #4294967295
    2542:	028c      	lsls	r4, r1, #10
    2544:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2548:	485f      	ldr	r0, [pc, #380]	; (26c8 <set_arm_clock+0x2b4>)
    254a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    254c:	4a5f      	ldr	r2, [pc, #380]	; (26cc <set_arm_clock+0x2b8>)
    254e:	4290      	cmp	r0, r2
    2550:	d97f      	bls.n	2652 <set_arm_clock+0x23e>
    2552:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 26f8 <set_arm_clock+0x2e4>
    2556:	226c      	movs	r2, #108	; 0x6c
    2558:	485d      	ldr	r0, [pc, #372]	; (26d0 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    255a:	4d58      	ldr	r5, [pc, #352]	; (26bc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    255c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2560:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    2564:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2568:	f8df c190 	ldr.w	ip, [pc, #400]	; 26fc <set_arm_clock+0x2e8>
    256c:	ea0e 0c0c 	and.w	ip, lr, ip
    2570:	45d4      	cmp	ip, sl
    2572:	d009      	beq.n	2588 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2578:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    257c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2580:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2582:	682a      	ldr	r2, [r5, #0]
    2584:	2a00      	cmp	r2, #0
    2586:	dafc      	bge.n	2582 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2588:	4a46      	ldr	r2, [pc, #280]	; (26a4 <set_arm_clock+0x290>)
    258a:	6915      	ldr	r5, [r2, #16]
    258c:	f005 0507 	and.w	r5, r5, #7
    2590:	429d      	cmp	r5, r3
    2592:	d003      	beq.n	259c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2594:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2596:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2598:	03dd      	lsls	r5, r3, #15
    259a:	d4fc      	bmi.n	2596 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    259c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    25a0:	d009      	beq.n	25b6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    25a2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    25a6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    25aa:	4a3e      	ldr	r2, [pc, #248]	; (26a4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    25ac:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    25ae:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    25b0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    25b2:	0799      	lsls	r1, r3, #30
    25b4:	d4fc      	bmi.n	25b0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    25b6:	4947      	ldr	r1, [pc, #284]	; (26d4 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    25b8:	4a47      	ldr	r2, [pc, #284]	; (26d8 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    25ba:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    25bc:	4291      	cmp	r1, r2
    25be:	d83c      	bhi.n	263a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    25c0:	4b46      	ldr	r3, [pc, #280]	; (26dc <set_arm_clock+0x2c8>)
    25c2:	09c9      	lsrs	r1, r1, #7
    25c4:	fba3 3101 	umull	r3, r1, r3, r1
    25c8:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    25ca:	1e4b      	subs	r3, r1, #1
    25cc:	021b      	lsls	r3, r3, #8
    25ce:	ea86 0203 	eor.w	r2, r6, r3
    25d2:	f412 7f40 	tst.w	r2, #768	; 0x300
    25d6:	d006      	beq.n	25e6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    25d8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    25dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    25e0:	4a30      	ldr	r2, [pc, #192]	; (26a4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    25e2:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    25e4:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    25e6:	4a2f      	ldr	r2, [pc, #188]	; (26a4 <set_arm_clock+0x290>)
    25e8:	6953      	ldr	r3, [r2, #20]
    25ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    25ee:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    25f0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    25f2:	069b      	lsls	r3, r3, #26
    25f4:	d4fc      	bmi.n	25f0 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    25f6:	4b3a      	ldr	r3, [pc, #232]	; (26e0 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    25f8:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    25fa:	fba3 2300 	umull	r2, r3, r3, r0
    25fe:	f04f 32ff 	mov.w	r2, #4294967295
    2602:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    2606:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    260a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    260e:	4a35      	ldr	r2, [pc, #212]	; (26e4 <set_arm_clock+0x2d0>)
    2610:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    2612:	4a35      	ldr	r2, [pc, #212]	; (26e8 <set_arm_clock+0x2d4>)
    2614:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2616:	4a35      	ldr	r2, [pc, #212]	; (26ec <set_arm_clock+0x2d8>)
    2618:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    261a:	d208      	bcs.n	262e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    261c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2620:	4a21      	ldr	r2, [pc, #132]	; (26a8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2622:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    2626:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2628:	6813      	ldr	r3, [r2, #0]
    262a:	2b00      	cmp	r3, #0
    262c:	dafc      	bge.n	2628 <set_arm_clock+0x214>
	}

	return frequency;
}
    262e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2632:	4673      	mov	r3, lr
    2634:	e762      	b.n	24fc <set_arm_clock+0xe8>
    2636:	2712      	movs	r7, #18
    2638:	e718      	b.n	246c <set_arm_clock+0x58>
    263a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    263e:	2104      	movs	r1, #4
    2640:	e7c5      	b.n	25ce <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2642:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2646:	4820      	ldr	r0, [pc, #128]	; (26c8 <set_arm_clock+0x2b4>)
    2648:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    264a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    264c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    264e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2652:	4a27      	ldr	r2, [pc, #156]	; (26f0 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2654:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2700 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2658:	fba2 2000 	umull	r2, r0, r2, r0
    265c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    265e:	4825      	ldr	r0, [pc, #148]	; (26f4 <set_arm_clock+0x2e0>)
    2660:	2a36      	cmp	r2, #54	; 0x36
    2662:	bf38      	it	cc
    2664:	2236      	movcc	r2, #54	; 0x36
    2666:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    266a:	ea42 0a0a 	orr.w	sl, r2, sl
    266e:	e774      	b.n	255a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2670:	ea4f 248c 	mov.w	r4, ip, lsl #10
    2674:	2300      	movs	r3, #0
    2676:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    267a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    267e:	46ac      	mov	ip, r5
    2680:	e762      	b.n	2548 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2682:	461d      	mov	r5, r3
    2684:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    2688:	4611      	mov	r1, r2
    268a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    268e:	e713      	b.n	24b8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    2690:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    2692:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2696:	4602      	mov	r2, r0
    2698:	4631      	mov	r1, r6
    269a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    269c:	46e6      	mov	lr, ip
    269e:	e753      	b.n	2548 <set_arm_clock+0x134>
    26a0:	1f78a400 	.word	0x1f78a400
    26a4:	400fc000 	.word	0x400fc000
    26a8:	40080000 	.word	0x40080000
    26ac:	23c34600 	.word	0x23c34600
    26b0:	004cb223 	.word	0x004cb223
    26b4:	51eb851f 	.word	0x51eb851f
    26b8:	016e3600 	.word	0x016e3600
    26bc:	400d8000 	.word	0x400d8000
    26c0:	80003040 	.word	0x80003040
    26c4:	269fb1ff 	.word	0x269fb1ff
    26c8:	005b8d80 	.word	0x005b8d80
    26cc:	4df67eff 	.word	0x4df67eff
    26d0:	4d3f6400 	.word	0x4d3f6400
    26d4:	08f0d17f 	.word	0x08f0d17f
    26d8:	2cb4177f 	.word	0x2cb4177f
    26dc:	00e5109f 	.word	0x00e5109f
    26e0:	431bde83 	.word	0x431bde83
    26e4:	200007bc 	.word	0x200007bc
    26e8:	200007b8 	.word	0x200007b8
    26ec:	20001210 	.word	0x20001210
    26f0:	165e9f81 	.word	0x165e9f81
    26f4:	00b71b00 	.word	0x00b71b00
    26f8:	8000206c 	.word	0x8000206c
    26fc:	8001307f 	.word	0x8001307f
    2700:	80002000 	.word	0x80002000

00002704 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    2704:	4a07      	ldr	r2, [pc, #28]	; (2724 <rtc_get+0x20>)
    2706:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    2708:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    270a:	4619      	mov	r1, r3
    270c:	4684      	mov	ip, r0
    270e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    2710:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    2712:	4299      	cmp	r1, r3
    2714:	d1f9      	bne.n	270a <rtc_get+0x6>
    2716:	4584      	cmp	ip, r0
    2718:	d1f7      	bne.n	270a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    271a:	0bdb      	lsrs	r3, r3, #15
}
    271c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    2720:	4770      	bx	lr
    2722:	bf00      	nop
    2724:	400d4000 	.word	0x400d4000

00002728 <memmove>:
    2728:	4288      	cmp	r0, r1
    272a:	d90d      	bls.n	2748 <memmove+0x20>
    272c:	188b      	adds	r3, r1, r2
    272e:	4283      	cmp	r3, r0
    2730:	d90a      	bls.n	2748 <memmove+0x20>
    2732:	eb00 0c02 	add.w	ip, r0, r2
    2736:	b1ba      	cbz	r2, 2768 <memmove+0x40>
    2738:	4662      	mov	r2, ip
    273a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    273e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    2742:	4299      	cmp	r1, r3
    2744:	d1f9      	bne.n	273a <memmove+0x12>
    2746:	4770      	bx	lr
    2748:	2a0f      	cmp	r2, #15
    274a:	d80e      	bhi.n	276a <memmove+0x42>
    274c:	4603      	mov	r3, r0
    274e:	f102 3cff 	add.w	ip, r2, #4294967295
    2752:	b14a      	cbz	r2, 2768 <memmove+0x40>
    2754:	f10c 0c01 	add.w	ip, ip, #1
    2758:	3b01      	subs	r3, #1
    275a:	448c      	add	ip, r1
    275c:	f811 2b01 	ldrb.w	r2, [r1], #1
    2760:	f803 2f01 	strb.w	r2, [r3, #1]!
    2764:	4561      	cmp	r1, ip
    2766:	d1f9      	bne.n	275c <memmove+0x34>
    2768:	4770      	bx	lr
    276a:	ea40 0301 	orr.w	r3, r0, r1
    276e:	079b      	lsls	r3, r3, #30
    2770:	d150      	bne.n	2814 <memmove+0xec>
    2772:	f1a2 0310 	sub.w	r3, r2, #16
    2776:	b570      	push	{r4, r5, r6, lr}
    2778:	f101 0c20 	add.w	ip, r1, #32
    277c:	f023 050f 	bic.w	r5, r3, #15
    2780:	f101 0e10 	add.w	lr, r1, #16
    2784:	f100 0410 	add.w	r4, r0, #16
    2788:	44ac      	add	ip, r5
    278a:	091b      	lsrs	r3, r3, #4
    278c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    2790:	f844 5c10 	str.w	r5, [r4, #-16]
    2794:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    2798:	f844 5c0c 	str.w	r5, [r4, #-12]
    279c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    27a0:	f844 5c08 	str.w	r5, [r4, #-8]
    27a4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    27a8:	f844 5c04 	str.w	r5, [r4, #-4]
    27ac:	f10e 0e10 	add.w	lr, lr, #16
    27b0:	45e6      	cmp	lr, ip
    27b2:	f104 0410 	add.w	r4, r4, #16
    27b6:	d1e9      	bne.n	278c <memmove+0x64>
    27b8:	3301      	adds	r3, #1
    27ba:	f012 0f0c 	tst.w	r2, #12
    27be:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    27c2:	f002 040f 	and.w	r4, r2, #15
    27c6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    27ca:	d027      	beq.n	281c <memmove+0xf4>
    27cc:	3c04      	subs	r4, #4
    27ce:	f024 0603 	bic.w	r6, r4, #3
    27d2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    27d6:	441e      	add	r6, r3
    27d8:	1f1c      	subs	r4, r3, #4
    27da:	468e      	mov	lr, r1
    27dc:	f85e 5b04 	ldr.w	r5, [lr], #4
    27e0:	f844 5f04 	str.w	r5, [r4, #4]!
    27e4:	42b4      	cmp	r4, r6
    27e6:	d1f9      	bne.n	27dc <memmove+0xb4>
    27e8:	f10c 0401 	add.w	r4, ip, #1
    27ec:	f002 0203 	and.w	r2, r2, #3
    27f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    27f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    27f8:	f102 3cff 	add.w	ip, r2, #4294967295
    27fc:	b14a      	cbz	r2, 2812 <memmove+0xea>
    27fe:	f10c 0c01 	add.w	ip, ip, #1
    2802:	3b01      	subs	r3, #1
    2804:	448c      	add	ip, r1
    2806:	f811 2b01 	ldrb.w	r2, [r1], #1
    280a:	f803 2f01 	strb.w	r2, [r3, #1]!
    280e:	4561      	cmp	r1, ip
    2810:	d1f9      	bne.n	2806 <memmove+0xde>
    2812:	bd70      	pop	{r4, r5, r6, pc}
    2814:	f102 3cff 	add.w	ip, r2, #4294967295
    2818:	4603      	mov	r3, r0
    281a:	e79b      	b.n	2754 <memmove+0x2c>
    281c:	4622      	mov	r2, r4
    281e:	e7eb      	b.n	27f8 <memmove+0xd0>

00002820 <memset>:
    2820:	0783      	lsls	r3, r0, #30
    2822:	b530      	push	{r4, r5, lr}
    2824:	d048      	beq.n	28b8 <memset+0x98>
    2826:	1e54      	subs	r4, r2, #1
    2828:	2a00      	cmp	r2, #0
    282a:	d03f      	beq.n	28ac <memset+0x8c>
    282c:	b2ca      	uxtb	r2, r1
    282e:	4603      	mov	r3, r0
    2830:	e001      	b.n	2836 <memset+0x16>
    2832:	3c01      	subs	r4, #1
    2834:	d33a      	bcc.n	28ac <memset+0x8c>
    2836:	f803 2b01 	strb.w	r2, [r3], #1
    283a:	079d      	lsls	r5, r3, #30
    283c:	d1f9      	bne.n	2832 <memset+0x12>
    283e:	2c03      	cmp	r4, #3
    2840:	d92d      	bls.n	289e <memset+0x7e>
    2842:	b2cd      	uxtb	r5, r1
    2844:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    2848:	2c0f      	cmp	r4, #15
    284a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    284e:	d936      	bls.n	28be <memset+0x9e>
    2850:	f1a4 0210 	sub.w	r2, r4, #16
    2854:	f022 0c0f 	bic.w	ip, r2, #15
    2858:	f103 0e20 	add.w	lr, r3, #32
    285c:	44e6      	add	lr, ip
    285e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    2862:	f103 0210 	add.w	r2, r3, #16
    2866:	e942 5504 	strd	r5, r5, [r2, #-16]
    286a:	e942 5502 	strd	r5, r5, [r2, #-8]
    286e:	3210      	adds	r2, #16
    2870:	4572      	cmp	r2, lr
    2872:	d1f8      	bne.n	2866 <memset+0x46>
    2874:	f10c 0201 	add.w	r2, ip, #1
    2878:	f014 0f0c 	tst.w	r4, #12
    287c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2880:	f004 0c0f 	and.w	ip, r4, #15
    2884:	d013      	beq.n	28ae <memset+0x8e>
    2886:	f1ac 0304 	sub.w	r3, ip, #4
    288a:	f023 0303 	bic.w	r3, r3, #3
    288e:	3304      	adds	r3, #4
    2890:	4413      	add	r3, r2
    2892:	f842 5b04 	str.w	r5, [r2], #4
    2896:	4293      	cmp	r3, r2
    2898:	d1fb      	bne.n	2892 <memset+0x72>
    289a:	f00c 0403 	and.w	r4, ip, #3
    289e:	b12c      	cbz	r4, 28ac <memset+0x8c>
    28a0:	b2c9      	uxtb	r1, r1
    28a2:	441c      	add	r4, r3
    28a4:	f803 1b01 	strb.w	r1, [r3], #1
    28a8:	429c      	cmp	r4, r3
    28aa:	d1fb      	bne.n	28a4 <memset+0x84>
    28ac:	bd30      	pop	{r4, r5, pc}
    28ae:	4664      	mov	r4, ip
    28b0:	4613      	mov	r3, r2
    28b2:	2c00      	cmp	r4, #0
    28b4:	d1f4      	bne.n	28a0 <memset+0x80>
    28b6:	e7f9      	b.n	28ac <memset+0x8c>
    28b8:	4603      	mov	r3, r0
    28ba:	4614      	mov	r4, r2
    28bc:	e7bf      	b.n	283e <memset+0x1e>
    28be:	461a      	mov	r2, r3
    28c0:	46a4      	mov	ip, r4
    28c2:	e7e0      	b.n	2886 <memset+0x66>

000028c4 <__libc_init_array>:
    28c4:	b570      	push	{r4, r5, r6, lr}
    28c6:	4e0d      	ldr	r6, [pc, #52]	; (28fc <__libc_init_array+0x38>)
    28c8:	4d0d      	ldr	r5, [pc, #52]	; (2900 <__libc_init_array+0x3c>)
    28ca:	1b76      	subs	r6, r6, r5
    28cc:	10b6      	asrs	r6, r6, #2
    28ce:	d006      	beq.n	28de <__libc_init_array+0x1a>
    28d0:	2400      	movs	r4, #0
    28d2:	f855 3b04 	ldr.w	r3, [r5], #4
    28d6:	3401      	adds	r4, #1
    28d8:	4798      	blx	r3
    28da:	42a6      	cmp	r6, r4
    28dc:	d1f9      	bne.n	28d2 <__libc_init_array+0xe>
    28de:	4e09      	ldr	r6, [pc, #36]	; (2904 <__libc_init_array+0x40>)
    28e0:	4d09      	ldr	r5, [pc, #36]	; (2908 <__libc_init_array+0x44>)
    28e2:	1b76      	subs	r6, r6, r5
    28e4:	f000 f818 	bl	2918 <___init_veneer>
    28e8:	10b6      	asrs	r6, r6, #2
    28ea:	d006      	beq.n	28fa <__libc_init_array+0x36>
    28ec:	2400      	movs	r4, #0
    28ee:	f855 3b04 	ldr.w	r3, [r5], #4
    28f2:	3401      	adds	r4, #1
    28f4:	4798      	blx	r3
    28f6:	42a6      	cmp	r6, r4
    28f8:	d1f9      	bne.n	28ee <__libc_init_array+0x2a>
    28fa:	bd70      	pop	{r4, r5, r6, pc}
    28fc:	60001af0 	.word	0x60001af0
    2900:	60001af0 	.word	0x60001af0
    2904:	60001af8 	.word	0x60001af8
    2908:	60001af0 	.word	0x60001af0
    290c:	00000000 	.word	0x00000000

00002910 <___reboot_Teensyduino__veneer>:
    2910:	f85f f000 	ldr.w	pc, [pc]	; 2914 <___reboot_Teensyduino__veneer+0x4>
    2914:	60001a05 	.word	0x60001a05

00002918 <___init_veneer>:
    2918:	f85f f000 	ldr.w	pc, [pc]	; 291c <___init_veneer+0x4>
    291c:	60001aad 	.word	0x60001aad

Disassembly of section .fini:

00002920 <_fini>:
    2920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2922:	bf00      	nop
